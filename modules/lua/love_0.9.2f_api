AlignMode love.graphics.AlignMode\nText alignment.
AreaSpreadDistribution love.graphics.AreaSpreadDistribution\nTypes of particle area spread distribution.
BezierCurve love.math.BezierCurve\nA Bézier curve object that can evaluate and render Bézier curves of\narbitrary degree.
BlendMode love.graphics.BlendMode\nDifferent ways you do alpha blending.
Body love.physics.Body\nBodies are objects with velocity and position.
BodyType love.physics.BodyType\n
BufferMode love.filesystem.BufferMode\nBuffer modes for File objects.
Canvas love.graphics.Canvas\nA Canvas is used for off-screen rendering. Think of it as an invisible\nscreen that you can draw to, but that will not be visible until you draw\nit to the actual visible screen. It is also known as "render to texture".\n\nBy drawing things that do not change position often (such as background\nitems) to the Canvas, and then drawing the entire Canvas instead of each\nitem, you can reduce the number of draw operations performed each frame.
CanvasFormat love.graphics.CanvasFormat\nCanvas formats.
ChainShape love.physics.ChainShape\nA ChainShape consists of multiple line segments. It can be used to create\nthe boundaries of your terrain. The shape does not have volume and can\nonly collide with PolygonShape and CircleShape.\n\nUnlike the PolygonShape, the ChainShape does not have a vertices limit\nor has to form a convex shape, but self intersections are not supported.
Channel love.thread.Channel\nA channel is a way to send and receive data to and from different threads.
CircleShape love.physics.CircleShape\nCircle extends Shape and adds a radius and a local position.
CompressedData love.image.CompressedData\nRepresents compressed image data designed to stay compressed in\nRAM. CompressedData encompasses standard compressed formats such as DXT1,\nDXT5, and BC5 / 3Dc.\n\nYou can't draw CompressedData directly to the screen. See Image for that.
Contact love.physics.Contact\nContacts are objects created to manage collisions in worlds.
Cursor love.mouse.Cursor\nRepresents a hardware cursor.
CursorType love.mouse.CursorType\nTypes of hardware cursors.
Data love.Data\nThe superclass of all data.
DistanceJoint love.physics.DistanceJoint\nKeeps two bodies at the same distance.
DistanceModel love.audio.DistanceModel\nThe different distance models.
DrawMode love.graphics.DrawMode\nControls whether shapes are drawn as an outline, or filled.
Drawable love.Drawable\nSuperclass for all things that can be drawn on screen. This is an abstract\ntype that can't be created directly.
EdgeShape love.physics.EdgeShape\nA EdgeShape is a line segment. They can be used to create the boundaries\nof your terrain. The shape does not have volume and can only collide\nwith PolygonShape and CircleShape.
Event love.event.Event\n
File love.filesystem.File\nRepresents a file on the filesystem.
FileData love.filesystem.FileData\nData representing the contents of a file.
FileDecoder love.filesystem.FileDecoder\nHow to decode a given FileData.
FileMode love.filesystem.FileMode\nThe different modes you can open a file in.
FilterMode love.graphics.FilterMode\nHow the image is filtered when scaling.
Fixture love.physics.Fixture\nFixtures attach shapes to bodies.
Font love.graphics.Font\nDefines the shape of characters than can be drawn onto the screen.
FrictionJoint love.physics.FrictionJoint\nA FrictionJoint applies friction to a body.
FullscreenType love.window.FullscreenType\nTypes of fullscreen modes.\n\nIn normal fullscreen mode, if a window size is used which does not match\none of the monitor's supported display modes, the window will be resized\nto the next largest display mode.\n\nNormal fullscreen mode is sometimes avoided by users because it can\ncause issues in some window managers and with multi-monitor setups. In\nOS X it prevents switching to a different program until fullscreen mode\nis exited. The "desktop" fullscreen mode generally avoids these issues.
GamepadAxis love.joystick.GamepadAxis\nVirtual gamepad axes.
GamepadButton love.joystick.GamepadButton\nVirtual gamepad buttons.
GearJoint love.physics.GearJoint\nKeeps bodies together in such a way that they act like gears.
GraphicsFeature love.graphics.GraphicsFeature\nGraphics features that can be checked for with love.graphics.isSupported.\n\nsubtractive, mipmap, and dxt are supported on nearly every system.\n\ncanvas, multicanvas, npot, and shader have roughly the same minimum\nrequirements for support: a DirectX 9.0c+ capable graphics card with\ndrivers that support ~OpenGL 2.1+.\n\nhdrcanvas, bc5, and srgb all share mostly the same minimum requirements\nfor support as well: a DirectX 10+ capable graphics card with drivers\nthat support ~OpenGL 3+.\n\nDirectX 9.0c+ capable graphics cards include the nvidia GeForce\n5000-series (2003) and newer, the ATI Radeon 9000-series and newer,\nand the Intel GMA x3100 GPU and newer.\n\nDirectX 10+ capable graphics cards include the nvidia GeForce 8000-series\n(2006) and newer, the ATI/AMD HD 2000-series and newer, and the Intel\nHD 2000/3000 GPUs and newer.
GraphicsLimit love.graphics.GraphicsLimit\nTypes of system-dependent graphics limits checked for using\nlove.graphics.getSystemLimit.
Image love.graphics.Image\nDrawable image type.
ImageData love.image.ImageData\nRaw (decoded) image data.\n\nYou can't draw ImageData directly to screen. See Image for that.
ImageFormat love.image.ImageFormat\nEncoded image formats.
Joint love.physics.Joint\nAttach multiple bodies together to interact in unique ways.
JointType love.physics.JointType\n
Joystick love.joystick.Joystick\nRepresents a physical joystick.
JoystickHat love.joystick.JoystickHat\nJoystick hat positions.
JoystickInputType love.joystick.JoystickInputType\nTypes of Joystick inputs.
KeyConstant love.keyboard.KeyConstant\nAll the keys you can press. Note that some keys may not be available on\nyour keyboard or system.
LineJoin love.graphics.LineJoin\nLine join style.
LineStyle love.graphics.LineStyle\nThe styles in which lines are drawn.
Mesh love.graphics.Mesh\n
MeshDrawMode love.graphics.MeshDrawMode\nHow a Mesh's vertices are used when drawing.
MouseConstant love.mouse.MouseConstant\nMouse buttons.
MouseJoint love.physics.MouseJoint\nFor controlling objects with the mouse.
Object love.Object\nThe superclass of all LÖVE types.
ParticleInsertMode love.graphics.ParticleInsertMode\nHow newly created particles are added to the ParticleSystem.
ParticleSystem love.graphics.ParticleSystem\nUsed to create cool effects, like fire. The particle systems are created\nand drawn on the screen using functions in love.graphics. They also need\nto be updated in the update(dt) callback for you to see any changes in\nthe particles emitted.
PointStyle love.graphics.PointStyle\nHow points should be drawn.
PolygonShape love.physics.PolygonShape\nPolygon is a convex polygon with up to 8 sides.
PowerState love.system.PowerState\nThe basic state of the system's power supply.
PrismaticJoint love.physics.PrismaticJoint\nRestricts relative motion between Bodies to one shared axis.
PulleyJoint love.physics.PulleyJoint\nAllows you to simulate bodies connected through pulleys.
Quad love.graphics.Quad\nA quadrilateral (a polygon with four sides and four corners) with texture\ncoordinate information.\n\nQuads can be used to select part of a texture to draw. In this way,\none large texture atlas can be loaded, and then split up into sub-images.
RandomGenerator love.math.RandomGenerator\nA random number generation object which has its own random state.
RevoluteJoint love.physics.RevoluteJoint\nAllow two Bodies to revolve around a shared point.
RopeJoint love.physics.RopeJoint\nThe RopeJoint enforces a maximum distance between two points on two\nbodies. It has no other effect.
Shader love.graphics.Shader\nA Shader is used for advanced hardware-accelerated pixel or vertex\nmanipulation. These effects are written in a language based on GLSL\n(OpenGL Shading Language) with a few things simplified for easier coding.\n\nPotential uses for pixel effects include HDR/bloom, motion blur,\ngrayscale/invert/sepia/any kind of color effect, reflection/refraction,\ndistortions, and much more!
Shape love.physics.Shape\nShapes are solid 2d geometrical objects used in love.physics.\n\nShapes are attached to a Body via a Fixture. The Shape object is copied\nwhen this happens. Shape position is relative to Body position.
ShapeType love.physics.ShapeType\nThe different types of Shapes, as returned by Shape:getType.
SoundData love.sound.SoundData\nContains raw audio samples. You can not play SoundData back directly. You\nmust wrap a Source object around it.
Source love.audio.Source\nA Source represents audio you can play back. You can do interesting things\nwith Sources, like set the volume, pitch, and its position relative to\nthe listener.
SourceType love.audio.SourceType\nTypes of audio sources.
SpriteBatch love.graphics.SpriteBatch\nUsing a single image, draw any number of identical copies of the image\nusing a single call to love.graphics.draw. This can be used, for example,\nto draw repeating copies of a single background image.\n\nA SpriteBatch can be even more useful when the underlying image is a\nTexture Atlas (a single image file containing many independent images);\nby adding Quad to the batch, different sub-images from within the atlas\ncan be drawn.
SpriteBatchUsage love.graphics.SpriteBatchUsage\nUsage hints for SpriteBatches to optimize sprite data storage on the GPU.
StackType love.graphics.StackType\nGraphics state stack types used with love.graphics.push.
TextureFormat love.graphics.TextureFormat\nCanvas and Image texture formats.\n\nThe HDR format is most useful when combined with pixel shaders. Effects\nsuch as tonemapped HDR with bloom can be accomplished, or the canvas\ncan be used to store arbitrary non-color data such as positions which\nare then interpreted and used in a shader, as long as you draw the right\nthings to the canvas.\n\nThe sRGB format should only be used when doing gamma-correct rendering,\nwhich is an advanced topic and it's easy to get color-spaces mixed up. If\nyou're not sure whether you need this, you might want to avoid it.\n\nNot all systems support the HDR and sRGB formats. Use\nlove.graphics.isSupported to check before creating the Canvas or Image.
Thread love.thread.Thread\nA Thread is a chunk of code that can run in parallel with other threads.\n\nThreads will place all Lua errors in "error". To retrieve the error,\ncall Thread:get('error') in the main thread.
TimeUnit love.audio.TimeUnit\nUnits that represent time.
WeldJoint love.physics.WeldJoint\nA WeldJoint essentially glues two bodies together.
World love.physics.World\nA world is an object that contains all bodies and joints.
WrapMode love.graphics.WrapMode\nHow the image wraps inside a larger Quad or Mesh.
_ love.keyboard.KeyConstant._\nUnderscore key
a love.filesystem.FileMode.a\nOpen a file for append.
a love.joystick.GamepadButton.a\nBottom face button (A).
a love.keyboard.KeyConstant.a\nThe A key
add SpriteBatch:add(x,y,[r],[sx],[sy],[ox],[oy],[kx],[ky])\nAdd a sprite to the batch.\n@param x The position to draw the object (x-axis).\n@param y The position to draw the object (y-axis).\n@param r Orientation (radians).\n@param sx Scale factor (x-axis).\n@param sy Scale factor (y-axis).\n@param ox Origin offset (x-axis).\n@param oy Origin offset (y-axis).\n@param kx Shear factor (x-axis).\n@param ky Shear factor (y-axis).\n@return number An identifier for the added sprite.
additive love.graphics.BlendMode.additive\nAdditive blend mode.
all love.graphics.StackType.all\nAll love.graphics state, including transform state.
alpha love.graphics.BlendMode.alpha\nAlpha blend mode ("normal").
appback love.keyboard.KeyConstant.appback\nApplication back key
appbookmarks love.keyboard.KeyConstant.appbookmarks\nApplication bookmarks key
append love.filesystem.append(name,data,[size])\nAppend data to an existing file.\n@param name The name (and path) of the file.\n@param data The data that should be written to the file\n@param size How many bytes to write.\n@return boolean True if the operation was successful, or nil if there\nwas an error.\n@return string The error message on failure.
appforward love.keyboard.KeyConstant.appforward\nApplication forward key
apphome love.keyboard.KeyConstant.apphome\nApplication home key
applyAngularImpulse Body:applyAngularImpulse(impulse)\nApplies an angular impulse to a body. This makes a single, instantaneous\naddition to the body momentum.\n\nA body with with a larger mass will react less. The reaction does not\ndepend on the timestep, and is equivalent to applying a force continuously\nfor 1 second. Impulses are best used to give a single push to a body. For\na continuous push to a body it is better to use Body:applyForce.\n@param impulse The impulse in kilogram-square meter per second.
applyForce Body:applyForce(fx,fy)\nApply force to a Body.\n\nA force pushes a body in a direction. A body with with a larger mass\nwill react less. The reaction also depends on how long a force is\napplied: since the force acts continuously over the entire timestep,\na short timestep will only push the body for a short time. Thus forces\nare best used for many timesteps to give a continuous push to a body\n(like gravity). For a single push that is independent of timestep,\nit is better to use Body:applyImpulse.\n\nIf the position to apply the force is not given, it will act on the\ncenter of mass of the body. The part of the force not directed towards\nthe center of mass will cause the body to spin (and depends on the\nrotational inertia).\n\nNote that the force components and position must be given in world\ncoordinates.\n@param fx The x component of force to apply to the center of mass.\n@param fy The y component of force to apply to the center of mass.
applyLinearImpulse Body:applyLinearImpulse(ix,iy)\nApplies an impulse to a body. This makes a single, instantaneous addition\nto the body momentum.\n\nAn impulse pushes a body in a direction. A body with with a larger mass\nwill react less. The reaction does not depend on the timestep, and is\nequivalent to applying a force continuously for 1 second. Impulses are\nbest used to give a single push to a body. For a continuous push to a\nbody it is better to use Body:applyForce.\n\nIf the position to apply the impulse is not given, it will act on\nthe center of mass of the body. The part of the impulse not directed\ntowards the center of mass will cause the body to spin (and depends on\nthe rotational inertia).\n\nNote that the impulse components and position must be given in world\ncoordinates.\n@param ix The x component of the impulse applied to the center of mass.\n@param iy The y component of the impulse applied to the center of mass.
applyTorque Body:applyTorque(torque)\nApply torque to a body.\n\nTorque is like a force that will change the angular velocity (spin)\nof a body. The effect will depend on the rotational inertia a body has.\n@param torque The torque to apply.
apprefresh love.keyboard.KeyConstant.apprefresh\nApplication refresh key
appsearch love.keyboard.KeyConstant.appsearch\nApplication search key
arc love.graphics.arc(mode,x,y,radius,angle1,angle2,[segments])\nDraws an arc.\n@param mode How to draw the arc.\n@param x The position of the center along x-axis.\n@param y The position of the center along y-axis.\n@param radius Radius of the arc.\n@param angle1 The angle at which the arc begins.\n@param angle2 The angle at which the arc terminates.\n@param segments The number of segments used for drawing the arc.
areSymlinksEnabled love.filesystem.areSymlinksEnabled()\nGets whether love.filesystem follows symbolic links.\n@return boolean Whether love.filesystem follows symbolic links.
arrow love.mouse.CursorType.arrow\nAn arrow pointer.
audio love.audio\nProvides an interface to create noise with the user's speakers.
axis love.joystick.JoystickInputType.axis\nAnalog axis.
b love.joystick.GamepadButton.b\nRight face button (B).
b love.keyboard.KeyConstant.b\nThe B key
back love.joystick.GamepadButton.back\nBack button.
backspace love.keyboard.KeyConstant.backspace\nBackspace key
base64 love.filesystem.FileDecoder.base64\nThe data is base64-encoded.
battery love.system.PowerState.battery\nNot plugged in, running on a battery.
bc5 love.graphics.GraphicsFeature.bc5\nSupport for BC4 and BC5 compressed images.
bevel love.graphics.LineJoin.bevel\nBevel style.
bind SpriteBatch:bind()\nBinds the SpriteBatch to the memory.\n\nBinding a SpriteBatch before updating its content can improve the\nperformance as it doesn't push each update to the graphics card\nseparately. Don't forget to unbind the SpriteBatch or the updates won't\nshow up.
bmp love.image.ImageFormat.bmp\nBMP image format.
bottom love.graphics.ParticleInsertMode.bottom\nParticles are inserted at the bottom of the ParticleSystem's list of\nparticles.
break love.keyboard.KeyConstant.break\nBreak key
button love.joystick.JoystickInputType.button\nButton.
c love.filesystem.FileMode.c\nDo not open a file (represents a closed file.)
c love.joystick.JoystickHat.c\nCentered
c love.keyboard.KeyConstant.c\nThe C key
calculator love.keyboard.KeyConstant.calculator\nCalculator key
canvas love.graphics.GraphicsFeature.canvas\nSupport for Canvas.
canvasfsaa love.graphics.GraphicsLimit.canvasfsaa\nThe maximum number of antialiasing samples for a Canvas.
capslock love.keyboard.KeyConstant.capslock\nCaps-lock key
center love.graphics.AlignMode.center\nAlign text center.
chain love.physics.ShapeType.chain\nThe Shape is a ChainShape.
charged love.system.PowerState.charged\nPlugged in, battery is fully charged.
charging love.system.PowerState.charging\nPlugged in, charging battery.
circle love.graphics.circle(mode,x,y,radius,[segments])\nDraws a circle.\n@param mode How to draw the circle.\n@param x The position of the center along x-axis.\n@param y The position of the center along y-axis.\n@param radius The radius of the circle.\n@param segments The number of segments used for drawing the circle.
circle love.physics.ShapeType.circle\nThe Shape is a CircleShape.
clamp love.graphics.WrapMode.clamp\nClamp the image. Appears only once.
clear Canvas:clear(red,green,blue,[alpha])\nClears content of a Canvas.\n\nWhen called without arguments, the Canvas will be cleared with color\nrgba = {0,0,0,0}, i.e. it will be fully transparent. If called with color\nparameters (be it numbers or a color table), the alpha component may be\nomitted in which case it defaults to 255 (fully opaque).\n@param red Red component of the clear color (0-255).\n@param green Green component of the clear color (0-255).\n@param blue Blue component of the clear color (0-255).\n@param alpha Alpha component of the clear color (0-255).
clear Channel:clear()\nClears all the messages in the Channel queue.
clear SpriteBatch:clear()\nRemoves all sprites from the buffer.
clear love.event.clear()\nClears the event queue.
clear love.graphics.clear()\nClears the screen to background color and restores the default coordinate\nsystem.\n\nThis function is called automatically before love.draw in the default\nlove.run function. See the example in love.run for a typical use of\nthis function.\n\nNote that the scissor area bounds the cleared region.
clear love.keyboard.KeyConstant.clear\nClear key
clone ParticleSystem:clone()\nCreates an identical copy of the ParticleSystem in the stopped state.\n\nCloned ParticleSystem inherit all the set-able state of the original\nParticleSystem, but they are initialized stopped.\n@return ParticleSystem The new identical copy of this ParticleSystem.
clone Source:clone()\nCreates an identical copy of the Source in the stopped state.\n\nStatic Sources will use significantly less memory and take much less\ntime to be created if Source:clone is used to create them instead of\nlove.audio.newSource, so this method should be preferred when making\nmultiple Sources which play the same sound.\n\nCloned Sources inherit all the set-able state of the original Source,\nbut they are initialized stopped.\n@return Source The new identical copy of this Source.
close File:close()\nCloses a file.\n@return boolean Whether closing was successful.
compose love.keyboard.KeyConstant.compose\nCompose key
computeAABB Shape:computeAABB(tx,ty,tr,[childIndex])\nReturns the points of the bounding box for the transformed shape.\n@param tx The translation of the shape on the x-axis.\n@param ty The translation of the shape on the y-axis.\n@param tr The shape rotation.\n@param childIndex The index of the child to compute the bounding box of.\n@return number The x position of the top-left point.\n@return number The y position of the top-left point.\n@return number The x position of the bottom-right point.\n@return number The y position of the bottom-right point.
computeMass Shape:computeMass(density)\nComputes the mass properties for the shape with the specified density.\n@param density The shape density.\n@return number The x postition of the center of mass.\n@return number The y postition of the center of mass.\n@return number The mass of the shape.\n@return number The rotational inertia.
createDirectory love.filesystem.createDirectory(name)\nCreates a directory.\n@param name The directory to create.\n@return boolean True if the directory was created, false if not.
crosshair love.mouse.CursorType.crosshair\nCrosshair symbol.
d love.joystick.JoystickHat.d\nDown
d love.keyboard.KeyConstant.d\nThe D key
delete love.keyboard.KeyConstant.delete\nDelete key
demand Channel:demand()\nRetrieves the value of a Channel message and removes it from the message\nqueue.\n\nThe value of the message can be a boolean, string, number, LÖVE userdata,\nor a simple flat table. It waits until a message is in the queue then\nreturns the message value.\n@return value The contents of the message.
desktop love.window.FullscreenType.desktop\nSometimes known as borderless fullscreen windowed mode. A borderless\nscreen-sized window is created which sits on top of all desktop GUI\nelements (such as the Windows taskbar and the Mac OS X dock.) The window\nis automatically resized to match the dimensions of the desktop, and\nits size cannot be changed.
destroy Body:destroy()\nExplicitly destroys the Body. When you don't have time to wait for garbage\ncollection, this function may be used to free the object immediately,\nbut note that an error will occur if you attempt to use the object after\ncalling this function.
destroy Fixture:destroy()\nDestroys the fixture
destroy Joint:destroy()\nExplicitly destroys the Joint. When you don't have time to wait for\ngarbage collection, this function may be used to free the object\nimmediately, but note that an error will occur if you attempt to use\nthe object after calling this function.
destroy Shape:destroy()\nExplicitly destroys the Shape. When you don't have time to wait for\ngarbage collection, this function may be used to free the object\nimmediately, but note that an error will occur if you attempt to use\nthe object after calling this function.  Note that Box2D doesn't allow\ndestroying or creating shapes during collision callbacks.
destroy World:destroy()\nDestroys the world, taking all bodies, joints, fixtures and their shapes\nwith it.\n\nAn error will occur if you attempt to use any of the destroyed objects\nafter calling this function.
distance love.physics.JointType.distance\nA DistanceJoint.
down love.keyboard.KeyConstant.down\nDown cursor key
dpdown love.joystick.GamepadButton.dpdown\nD-pad down.
dpleft love.joystick.GamepadButton.dpleft\nD-pad left.
dpright love.joystick.GamepadButton.dpright\nD-pad right.
dpup love.joystick.GamepadButton.dpup\nD-pad up.
draw love.draw()\nCallback function used to draw on the screen every frame.
draw love.graphics.draw(drawable,[x],[y],[r],[sx],[sy],[ox],[oy],[kx],[ky])\nDraws objects on screen. Drawable objects are loaded images, but may be\nother kinds of Drawable objects, such as a ParticleSystem.\n\nIn addition to simple drawing, this function can rotate and scale the\nobject at the same time, as well as offset the image (for example,\nto center the image at the chosen coordinates).\n\nlove.graphics.draw anchors from the top left corner by default.\n\nYou can specify a negative value for sx or sy to flip the drawable\nhorizontally or vertically.\n\nThe pivotal point is (x, y) on the screen and (ox, oy) in the internal\ncoordinate system of the drawable object, before rotation and scaling. The\nobject is scaled by (sx, sy), then rotated by r around the pivotal point.\n\nThe origin offset values are most often used to shift the images up and\nleft by half of its height and width, so that (effectively) the specified\nx and y coordinates are where the center of the image will end up.\n@param drawable A drawable object.\n@param x The position to draw the object (x-axis).\n@param y The position to draw the object (y-axis).\n@param r Orientation (radians).\n@param sx Scale factor (x-axis). Can be negative.\n@param sy Scale factor (y-axis). Can be negative.\n@param ox Origin offset (x-axis). (A value of 20 would effectively move\nyour drawable object 20 pixels to the left.)\n@param oy Origin offset (y-axis). (A value of 20 would effectively move\nyour drawable object 20 pixels up.)\n@param kx Shearing factor (x-axis).\n@param ky Shearing factor (y-axis).
dxt love.graphics.GraphicsFeature.dxt\nSupport for DXT compressed images (see CompressedFormat.)
dynamic love.graphics.SpriteBatchUsage.dynamic\nThe SpriteBatch data will change repeatedly during its lifetime.
dynamic love.physics.BodyType.dynamic\nDynamic bodies collide with all bodies.
e love.keyboard.KeyConstant.e\nThe E key
edge love.physics.ShapeType.edge\nThe Shape is a EdgeShape.
emit ParticleSystem:emit(numparticles)\nEmits a burst of particles from the particle emitter.\n@param numparticles The amount of particles to emit. The number of\nemitted particles will be truncated if the particle system's max buffer\nsize is reached.
encode ImageData:encode(filename)\nEncodes the ImageData and writes it to the save directory.\n@param filename Name of a file to write encoded data to. The format will\nbe automatically deduced from the file extension.
end love.keyboard.KeyConstant.end\nEnd key
eof File:eof()\nIf the end-of-file has been reached\n@return boolean Whether EOF has been reached.
errhand love.errhand(msg)\nThe error handler, used to display error messages.\n@param msg The error message.
escape love.keyboard.KeyConstant.escape\nEscape key
euro love.keyboard.KeyConstant.euro\nEuro (&euro;) key
evalulate BezierCurve:evalulate(t)\nEvaluate Bézier curve at parameter t. The parameter must be between 0\nand 1 (inclusive).\n\nThis function can be used to move objects along paths or tween\nparameters. However it should not be used to render the curve, see\nBezierCurve:render for that purpose.\n@param t Where to evaluate the curve.\n@return number x coordinate of the curve at parameter t.\n@return number y coordinate of the curve at parameter t.
event love.event\nManages events, like keypresses.
exists love.filesystem.exists(filename)\nCheck whether a file or directory exists.\n@param filename The path to a potential file or directory.\n@return boolean True if there is a file or directory with the specified\nname. False otherwise.
exponent love.audio.DistanceModel.exponent\nExponential attenuation.
f love.keyboard.KeyConstant.f\nThe F key
f1 love.keyboard.KeyConstant.f1\nThe 1st function key
f10 love.keyboard.KeyConstant.f10\nThe 10th function key
f11 love.keyboard.KeyConstant.f11\nThe 11th function key
f12 love.keyboard.KeyConstant.f12\nThe 12th function key
f13 love.keyboard.KeyConstant.f13\nThe 13th function key
f14 love.keyboard.KeyConstant.f14\nThe 14th function key
f15 love.keyboard.KeyConstant.f15\nThe 15th function key
f2 love.keyboard.KeyConstant.f2\nThe 2nd function key
f3 love.keyboard.KeyConstant.f3\nThe 3rd function key
f4 love.keyboard.KeyConstant.f4\nThe 4th function key
f5 love.keyboard.KeyConstant.f5\nThe 5th function key
f6 love.keyboard.KeyConstant.f6\nThe 6th function key
f7 love.keyboard.KeyConstant.f7\nThe 7th function key
f8 love.keyboard.KeyConstant.f8\nThe 8th function key
f9 love.keyboard.KeyConstant.f9\nThe 9th function key
fan love.graphics.MeshDrawMode.fan\nThe vertices create a "fan" shape with the first vertex acting as the\nhub point. Can be easily used to draw simple convex polygons.
file love.filesystem.FileDecoder.file\nThe data is unencoded.
filesystem love.filesystem\nProvides an interface to the user's filesystem.
fill love.graphics.DrawMode.fill\nDraw filled shape.
flush File:flush()\nFlushes any buffered written data in the file to the disk.\n@return boolean Whether the file successfully flushed any buffered data\nto the disk.\n@return string The error string, if an error occurred and the file could\nnot be flushed.
flush SpriteBatch:flush()\nImmediately sends all new and modified sprite data in the batch to the\ngraphics card.
focus love.event.Event.focus\nWindow focus gained or lost
focus love.focus(f)\nCallback function triggered when window receives or loses focus.\n@param f Window focus.
fromPixels love.window.fromPixels(pixelvalue)\nConverts a number from pixels to density-independent units.\n\nIf the highdpi window flag is enabled in Mac OS X and the window is\nin a retina screen, density-independent units will be twice the size of\npixels. Otherwise they will usually be the same. This function can be used\nto convert coordinates from pixels to the the size users are expecting\nthem to display at onscreen. love.window.toPixels does the opposite.\n\nMost LÖVE functions return values and expect arguments in terms of\npixels rather than density-independent units.\n@param pixelvalue A number in pixels to convert to density-independent\nunits.\n@return number The converted number, in density-independent units.
full love.filesystem.BufferMode.full\nFull buffering. Write and append operations are always buffered until\nthe buffer size limit is reached.
g love.keyboard.KeyConstant.g\nThe G key
gamepadaxis love.gamepadaxis(joystick,axis)\nCalled when a Joystick's virtual gamepad axis is moved.\n@param joystick The joystick object.\n@param axis The virtual gamepad axis.
gamepadpressed love.gamepadpressed(joystick,button)\nCalled when a Joystick's virtual gamepad button is pressed.\n@param joystick The joystick object.\n@param button The virtual gamepad button.
gamepadreleased love.gamepadreleased(joystick,button)\nCalled when a Joystick's virtual gamepad button is released.\n@param joystick The joystick object.\n@param button The virtual gamepad button.
gammaToLinear love.math.gammaToLinear(r,g,b)\nConverts a color from gamma-space (sRGB) to linear-space (RGB). This is\nuseful when doing gamma-correct rendering using colors created based on\nwhat they look like on-screen.\n\nGamma-space sRGB has more precision in the lower end than linear\nRGB. Using this function to convert from sRGB to RGB can result in\nnon-integer color values, which get truncated to integers and lose\nprecision when used with other functions such as love.graphics.setColor.\n@param r The red channel of the sRGB color to convert.\n@param g The green channel of the sRGB color to convert.\n@param b The blue channel of the sRGB color to convert.\n@return number The red channel of the converted color in linear RGB space.\n@return number The green channel of the converted color in linear\nRGB space.\n@return number The blue channel of the converted color in linear RGB\nspace.
gear love.physics.JointType.gear\nA GearJoint.
getAnchors Joint:getAnchors()\nGet the anchor points of the joint.\n@return number The x component of the anchor on Body 1.\n@return number The y component of the anchor on Body 1.\n@return number The x component of the anchor on Body 2.\n@return number The y component of the anchor on Body 2.
getAngle Body:getAngle()\nGet the angle of the body.\n\nThe angle is measured in radians. If you need to transform it to degrees,\nuse math.deg.\n\nA value of 0 radians will mean "looking to the right". Although radians\nincrease counter-clockwise, the y-axis points down so it becomes clockwise\nfrom our point of view.\n@return number The angle in radians.
getAngularDamping Body:getAngularDamping()\nGets the Angular damping of the Body\n\nThe angular damping is the rate of decrease of the angular velocity\nover time: A spinning body with no damping and no external forces\nwill continue spinning indefinitely. A spinning body with damping will\ngradually stop spinning.\n\nDamping is not the same as friction - they can be modelled\ntogether. However, only damping is provided by Box2D (and LÖVE).\n\nDamping parameters should be between 0 and infinity, with 0 meaning\nno damping, and infinity meaning full damping. Normally you will use a\ndamping value between 0 and 0.1.\n@return number The value of the angular damping.
getAngularVelocity Body:getAngularVelocity()\nGet the angular velocity of the Body.\n\nThe angular velocity is the rate of change of angle over time.\n\nIt is changed in World:update by applying torques, off centre\nforces/impulses, and angular damping. It can be set directly with\nBody:setAngularVelocity.\n\nIf you need the rate of change of position over time, use\nBody:getLinearVelocity.\n@return number The angular velocity in radians/second.
getAppdataDirectory love.filesystem.getAppdataDirectory()\nReturns the application data directory (could be the same as\ngetUserDirectory)\n@return string The path of the application data directory.
getAreaSpread ParticleSystem:getAreaSpread()\nGets the area-based spawn parameters for the particles.\n@return AreaSpreadDistribution The type of distribution for new particles.\n@return number The maximum spawn distance from the emitter along the\nx-axis for uniform distribution, or the standard deviation along the\nx-axis for normal distribution.\n@return number The maximum spawn distance from the emitter along the\ny-axis for uniform distribution, or the standard deviation along the\ny-axis for normal distribution.
getAscent Font:getAscent()\nGets the ascent of the Font. The ascent spans the distance between the\nbaseline and the top of the glyph that reaches farthest from the baseline.\n@return number The ascent of the Font in pixels.
getAttenuationDistances Source:getAttenuationDistances()\nReturns the reference and maximum distance of the source.\n@return number The reference distance.\n@return number The maximum distance.
getAverageDelta love.timer.getAverageDelta()\nReturns the average delta time (seconds per frame) over the last second.\n@return number The average delta time over the last second.
getAxes Joystick:getAxes()\nGets the direction of each axis.\n@return number Direction of axis1.\n@return number Direction of axis2.\n@return number Direction of axisN.
getAxis Joystick:getAxis(axis)\nGets the direction of an axis.\n@param axis The index of the axis to be checked.\n@return number Current value of the axis.
getAxisCount Joystick:getAxisCount()\nGets the number of axes on the joystick.\n@return number The number of axes available.
getBackgroundColor love.graphics.getBackgroundColor()\nGets the current background color.\n@return number The red component (0-255).\n@return number The green component (0-255).\n@return number The blue component (0-255).\n@return number The alpha component (0-255).
getBaseline Font:getBaseline()\nGets the baseline of the Font. Most scripts share the notion of a\nbaseline: an imaginary horizontal line on which characters rest. In some\nscripts, parts of glyphs lie below the baseline.\n@return number The baseline of the Font in pixels.
getBitDepth SoundData:getBitDepth()\nReturns the number of bits per sample.\n@return number Either 8 or 16.
getBlendMode love.graphics.getBlendMode()\nGets the blending mode.\n@return BlendMode The current blend mode.
getBodies Joint:getBodies()\nGets the bodies that the Joint is attached to.\n@return Body The first Body.\n@return Body The second Body.
getBody Fixture:getBody()\nReturns the body to which the fixture is attached.\n@return Body The parent body.
getBody Shape:getBody()\nGet the Body the shape is attached to.\n@return Body The body the shape is attached to.
getBodyCount World:getBodyCount()\nGet the number of bodies in the world.\n@return number The number of bodies in the world.
getBodyList World:getBodyList()\nReturns a table with all bodies.\n@return table A sequence with all bodies.
getBoundingBox Fixture:getBoundingBox([index])\nReturns the points of the fixture bounding box. In case the fixture has\nmultiple childern a 1-based index can be specified.\n@param index The fixture child to get the bounding box of.\n@return number The x position of the top-left point.\n@return number The y position of the top-left point.\n@return number The x position of the bottom-right point.\n@return number The y position of the bottom-right point.
getBoundingBox Shape:getBoundingBox()\nGets the bounding box of the shape. This function can be used in a nested\nfashion with love.graphics.polygon.\n\nA bounding box is the smallest rectangle that encapsulates the entire\npolygon.\n\nVertexes are returned starting from the bottom-left in a clockwise fashion\n(bottom-left, top-left, top-right, bottom-right).\n@return number The x component of the first vertex, bottom-left.\n@return number The y component of the first vertex, bottom-left.\n@return number The x component of the second vertex, top-left.\n@return number The y component of the second vertex, top-left.\n@return number The x component of the third vertex, top-right.\n@return number The y component of the third vertex, top-right.\n@return number The x component of the fourth vertex, bottom-right.\n@return number The y component of the fourth vertex, bottom-right.
getBuffer File:getBuffer()\nGets the buffer mode of a file.\n@return BufferMode The current buffer mode of the file.\n@return number The maximum size in bytes of the file's buffer.
getBufferSize ParticleSystem:getBufferSize()\nGets the size of the buffer (the max allowed amount of particles in\nthe system).\n@return number The buffer size.
getBufferSize SpriteBatch:getBufferSize()\nGets the maximum number of sprites the SpriteBatch can hold.\n@return number The maximum number of sprites the batch can hold.
getButtonCount Joystick:getButtonCount()\nGets the number of buttons on the joystick.\n@return number The number of buttons available.
getCallbacks World:getCallbacks()\nReturns functions for the callbacks during the world update.\n@return function Gets called when two fixtures begin to overlap.\n@return function Gets called when two fixtures cease to overlap.\n@return function Gets called before a collision gets resolved.\n@return function Gets called after the collision has been resolved.
getCanvas love.graphics.getCanvas()\nGets the current target Canvas.\n@return Canvas The Canvas set by setCanvas. Returns nil if drawing to\nthe real screen.
getCanvasFormats love.graphics.getCanvasFormats()\nGets the available Canvas formats, and whether each is supported.\n@return table A table containing CanvasFormats as keys, and a boolean\nindicating whether the format is supported as values. Not all systems\nsupport all formats.
getCategory Fixture:getCategory()\nReturns the categories the fixture belongs to.\n@return number The first category.\n@return number The second category.\n@return number Additional categories.
getChannel love.thread.getChannel(name)\nCreates or retrieves a named thread channel.\n@param name The name of the channel you want to create or retrieve.\n@return Channel A named channel object which can be further manipulated.
getChannels SoundData:getChannels()\nReturns the number of channels in the stream.\n@return number 1 for mono, 2 for stereo.
getChannels Source:getChannels()\nGets the number of channels in the Source. Only 1-channel (mono) Sources\ncan use directional and positional effects.\n@return number 1 for mono, 2 for stereo.
getChildCount Shape:getChildCount()\nReturns the number of children the shape has.\n@return number The number of children.
getChildEdge ChainShape:getChildEdge(index)\nReturns a child of the shape as an EdgeShape.\n@param index The index of the child.\n@return number The child as an EdgeShape.
getClipboardText love.system.getClipboardText()\nGets text from the clipboard.\n@return string The text currently held in the system's clipboard.
getCollideConnected Joint:getCollideConnected()\nGets whether the connected Bodies collide.\n@return boolean True if they collide, false otherwise.
getColor SpriteBatch:getColor()\nGets the color that will be used for the next add and set operations.\n\nIf no color has been set with SpriteBatch:setColor or the current\nSpriteBatch color has been cleared, this method will return nil.
getColor love.graphics.getColor()\nGets the current color.\n@return number The red component (0-255).\n@return number The red component (0-255).\n@return number The blue component (0-255).\n@return number The alpha component (0-255).
getColorMask love.graphics.getColorMask()\nGets the active color components used when drawing. Normally all 4\ncomponents are active unless love.graphics.setColorMask has been used.\n\nThe color mask determines whether individual components of the colors\nof drawn objects will affect the color of the screen. They affect\nlove.graphics.clear and Canvas:clear as well.\n@return boolean Whether the red color component is active when rendering.\n@return boolean Whether the green color component is active when\nrendering.\n@return boolean Whether the blue color component is active when rendering.\n@return boolean Whether the alpha color component is active when\nrendering.
getColors ParticleSystem:getColors()\nGets a series of colors to apply to the particle sprite. The particle\nsystem will interpolate between each color evenly over the particle's\nlifetime. Color modulation needs to be activated for this function to\nhave any effect.\n\nArguments are passed in groups of four, representing the components of\nthe desired RGBA value. At least one color must be specified. A maximum\nof eight may be used.\n@return number First color, red component (0-255).\n@return number First color, green component (0-255).\n@return number First color, blue component (0-255).\n@return number First color, alpha component (0-255).\n@return number Second color, red component (0-255).\n@return number Second color, green component (0-255).\n@return number Second color, blue component (0-255).\n@return number Second color, alpha component (0-255).\n@return number Etc.
getCompressedImageFormats love.graphics.getCompressedImageFormats()\nGets the available compressed image formats, and whether each is\nsupported.\n@return table A table containing CompressedFormats as keys, and a boolean\nindicating whether the format is supported as values. Not all systems\nsupport all formats.
getCone Source:getCone()\nGets the Source's directional volume cones. Together with\nSource:setDirection, the cone angles allow for the Source's volume to\nvary depending on its direction.\n@return number The inner angle from the Source's direction, in\nradians. The Source will play at normal volume if the listener is inside\nthe cone defined by this angle.\n@return number The outer angle from the Source's direction, in\nradians. The Source will play at a volume between the normal and outer\nvolumes, if the listener is in between the cones defined by the inner\nand outer angles.\n@return number The Source's volume when the listener is outside both\nthe inner and outer cone angles.
getConstant PulleyJoint:getConstant()\nGet the total length of the rope.\n@return number The length of the rope in the joint.
getContactCount World:getContactCount()\nReturns the number of contacts in the world.\n@return number The number of contacts in the world.
getContactFilter World:getContactFilter()\nReturns the function for collision filtering.\n@return function The function that handles the contact filtering.
getContactList Body:getContactList()\nGets a list of all Contacts attached to the Body.\n@return table A list with all contacts associated with the Body.
getContactList World:getContactList()\nReturns a table with all contacts.\n@return table A sequence with all contacts.
getControlPoint BezierCurve:getControlPoint(i)\nGet coordinates of the i-th control point. Indices start with 1.\n@param i Index of the control point.\n@return number Position of the control point along the x axis.\n@return number Position of the control point along the y axis.
getControlPointCount BezierCurve:getControlPointCount()\nGet the number of control points in the Bézier curve.\n@return number The number of control points.
getCount Channel:getCount()\nRetrieves the number of messages in the thread Channel queue.\n@return number The number of messages in the queue.
getCount ParticleSystem:getCount()\nGets the amount of particles that are currently in the system.\n@return number The current number of live particles.
getCount SpriteBatch:getCount()\nGets the amount of sprites currently in the SpriteBatch.\n@return number The amount of sprites currently in the batch.
getCursor love.mouse.getCursor()\nGets the current Cursor.\n@return Cursor The current cursor, or nil if no cursor is set.
getDampingRatio DistanceJoint:getDampingRatio()\nGets the damping ratio.\n@return number The damping ratio.
getDampingRatio MouseJoint:getDampingRatio()\nReturns the damping ratio.\n@return number The new damping ratio.
getDampingRatio WeldJoint:getDampingRatio()\nReturns the damping ratio of the joint.\n@return number The damping ratio.
getData Image:getData()\nGets the original ImageData or CompressedData used to create the Image.\n\nAll Images keep a reference to the Data that was used to create the\nImage. The Data is used to refresh the Image when love.window.setMode\nor Image:refresh is called.\n@return ImageData The original ImageData used to create the Image,\nif the image is not compressed.
getData Shape:getData()\nGet the data set with setData.\n@return any The data previously set, or nil if none.
getDefaultFilter love.graphics.getDefaultFilter()\nReturns the default scaling filters used with Images, Canvases, and Fonts.\n@return FilterMode Filter mode used when scaling the image down.\n@return FilterMode Filter mode used when scaling the image up.\n@return number Maximum amount of Anisotropic Filtering used.
getDegree BezierCurve:getDegree()\nGet degree of the Bézier curve. The degree is equal to\nnumber-of-control-points - 1.\n@return number Degree of the Bézier curve.
getDelta love.timer.getDelta()\nReturns the time between the last two frames.\n@return number The time passed (in seconds).
getDensity Fixture:getDensity()\nReturns the density of the fixture.\n@return number The fixture density in kilograms per square meter.
getDensity Shape:getDensity()\nGets the density of the Shape.\n@return number The density of the Shape.
getDerivative BezierCurve:getDerivative()\nGet the derivative of the Bézier curve.\n\nThis function can be used to rotate sprites moving along a curve in the\ndirection of the movement and compute the direction perpendicular to\nthe curve at some parameter t.\n@return BezierCurve The derivative curve.
getDescent Font:getDescent()\nGets the descent of the Font. The descent spans the distance between\nthe baseline and the lowest descending glyph in a typeface.\n@return number The descent of the Font in pixels.
getDimensions Canvas:getDimensions()\nGets the width and height of the Canvas.\n@return number The width of the Canvas, in pixels.\n@return number The height of the Canvas, in pixels.
getDimensions CompressedData:getDimensions(level)\nGets the width and height of the CompressedData.\n@param level A mipmap level. Must be in the range of [1,\nCompressedData:getMipmapCount()].\n@return number The width of the CompressedData.\n@return number The height of the CompressedData.
getDimensions Image:getDimensions()\nGets the width and height of the Image.\n@return number The width of the Image, in pixels.\n@return number The height of the Image, in pixels.
getDimensions ImageData:getDimensions()\nGets the width and height of the ImageData.\n@return number The width of the ImageData.\n@return number The height of the ImageData.
getDimensions love.graphics.getDimensions()\nGets the width and height of the window.\n@return number The width of the window.\n@return number The height of the window.
getDimensions love.window.getDimensions()\nGets the width and height of the window.\n@return number The width of the window.\n@return number The height of the window.
getDirection ParticleSystem:getDirection()\nGets the direction the particles will be emitted in.\n@return number The direction of the particles (in radians).
getDirection Source:getDirection()\nGets the direction of the Source.\n@return number The X part of the direction vector.\n@return number The Y part of the direction vector.\n@return number The Z part of the direction vector.
getDirectoryItems love.filesystem.getDirectoryItems(dir)\nReturns a table with the names of files and subdirectories in the\nspecified path. The table is not sorted in any way; the order is\nundefined.\n\nIf the path passed to the function exists in the game and the save\ndirectory, it will list the files and directories from both places.\n@param dir The directory.\n@return table A sequence with the names of all files and subdirectories\nas strings.
getDisplayName love.window.getDisplayName(displayindex)\nGets the name of a display.\n@param displayindex The index of the display to get the name of.\n@return string The name of the specified display.
getDistance love.physics.getDistance(fixture1,fixture2)\nReturns the two closest points between two fixtures and their distance.\n@param fixture1 The first fixture.\n@param fixture2 The second fixture.\n@return number The distance of the two points.\n@return number The x-coordinate of the first point.\n@return number The y-coordinate of the first point.\n@return number The x-coordinate of the second point.\n@return number The y-coordinate of the second point.
getDistanceModel love.audio.getDistanceModel()\nReturns the distance attenuation model.\n@return DistanceModel The current distance model. The default is\n'inverse clamped'.
getDopplerScale love.audio.getDopplerScale()\nGets the current global scale factor for velocity-based doppler effects.\n@return number The current doppler scale factor.
getDrawMode Mesh:getDrawMode()\nGets the mode used when drawing the Mesh.\n@return MeshDrawMode The mode used when drawing the Mesh.
getDrawRange Mesh:getDrawRange()\nGets the range of vertices used when drawing the Mesh.\n\nIf the Mesh's draw range has not been set previously with\nMesh:setDrawRange, this function will return nil.\n@return number The index of the first vertex used when drawing, or\nthe index of the first value in the vertex map used if one is set for\nthis Mesh.\n@return number The index of the last vertex used when drawing, or\nthe index of the last value in the vertex map used if one is set for\nthis Mesh.
getDuration SoundData:getDuration()\nReturns the number of channels in the stream.\n@return number The duration of the sound data in seconds.
getEmissionRate ParticleSystem:getEmissionRate()\nGets the amount of particles emitted per second.\n@return number The amount of particles per second.
getEmitterLifetime ParticleSystem:getEmitterLifetime()\nGets how long the particle system should emit particles (if -1 then it\nemits particles forever).\n@return number The lifetime of the emitter (in seconds).
getError Thread:getError()\nRetrieves the error string from the thread if it produced a error.\n@return string The error message.
getExtension FileData:getExtension()\nGets the extension of the FileData.\n@return string The extension of the file the FileData represents.
getExternVariable Shader:getExternVariable(name)\nGets information about an 'extern' ('uniform') variable in the shader.\n@param name The name of the extern variable.\n@return ShaderVariableType The base type of the variable.\n@return number The number of components in the variable (e.g. 2 for a\nvec2 or mat2.)\n@return number The number of elements in the array if the variable is\nan array, or 1 if not.
getFPS love.timer.getFPS()\nReturns the current frames per second.\n@return number The current FPS.
getFSAA Canvas:getFSAA()\nGets the number of antialiasing samples used when drawing to the Canvas.\n\nThis may be different than the number used as an argument to\nlove.graphics.newCanvas if the system running LÖVE doesn't support\nthat number.\n@return number The number of antialiasing samples used by the canvas\nwhen drawing to it.
getFSAA love.graphics.getFSAA()\nGets the number of antialiasing samples used when drawing to the Canvas.\n\nThis may be different than the number used as an argument to\nlove.graphics.newCanvas if the system running LÖVE doesn't support\nthat number.\n@return number The number of antialiasing samples used by the canvas\nwhen drawing to it.
getFilename FileData:getFilename()\nGets the filename of the FileData.\n@return string The name of the file the FileData represents.
getFilter Canvas:getFilter()\nGets the filter mode of the Canvas.\n@return FilterMode Filter mode used when minifying the canvas.\n@return FilterMode Filter mode used when magnifying the canvas.\n@return number Maximum amount of anisotropic filtering used.
getFilter Font:getFilter()\nGets the filter mode for a font.\n@return FilterMode Filter mode used when minifying the font.\n@return FilterMode Filter mode used when magnifying the font.\n@return number Maximum amount of anisotropic filtering used.
getFilter Image:getFilter()\nGets the filter mode for an image.\n@return FilterMode Filter mode used when minifying the image.\n@return FilterMode Filter mode used when magnifying the image.
getFilterData Fixture:getFilterData()\nReturns the filter data of the fixture. Categories and masks are encoded\nas the bits of a 16-bit integer.\n@return number The categories as an integer from 0 to 65535.\n@return number The mask as an integer from 0 to 65535.\n@return number The group as an integer from -32768 to 32767.
getFilterData Shape:getFilterData()\nGets the filter data of the Shape.\n@return number A 16-bit integer representing category membership.\n@return number A 16-bit integer representing masked categories.\n@return number An integer representing the group index.
getFixtureList Body:getFixtureList()\nReturns a table with all fixtures.\n@return table A sequence with all fixtures.
getFixtures Contact:getFixtures()\nGets the two Fixtures that hold the shapes that are in contact.\n@return Fixture The first Fixture.\n@return Fixture The second Fixture.
getFont love.graphics.getFont()\nGets the current Font object.\n@return Font The current Font, or nil if none is set.
getFrequency DistanceJoint:getFrequency()\nGets the response speed.\n@return number The response speed.
getFrequency MouseJoint:getFrequency()\nReturns the frequency.\n@return number The frequency in hertz.
getFrequency WeldJoint:getFrequency()\nReturns the frequency.\n@return number The frequency in hertz.
getFriction Contact:getFriction()\nGet the friction between two shapes that are in contact.\n@return number The friction of the contact.
getFriction Fixture:getFriction()\nReturns the friction of the fixture.\n@return number The fixture friction.
getFriction Shape:getFriction()\nGets the friction of this shape.\n@return number The friction of the shape.
getFullscreen love.window.getFullscreen()\nGets whether the window is fullscreen.\n@return boolean True if the window is fullscreen, false otherwise.\n@return FullscreenType The type of fullscreen mode used.
getFullscreenModes love.graphics.getFullscreenModes()\nGets a list of supported fullscreen modes.\n@return table A table of width/height pairs. (Note that this may not be\nin order.)
getFullscreenModes love.window.getFullscreenModes([display])\nGets a list of supported fullscreen modes.\n@param display The index of the display, if multiple monitors are\navailable.\n@return table A table of width/height pairs. (Note that this may not be\nin order.)
getGUID Joystick:getGUID()\nGets a stable GUID unique to the type of the physical joystick which does\nnot change over time. For example, all Sony Dualshock 3 controllers in\nOS X have the same GUID. The value is platform-dependent.\n@return string The Joystick type's OS-dependent unique identifier.
getGamepadAxis Joystick:getGamepadAxis(axis)\nGets the direction of a virtual gamepad axis. If the Joystick isn't\nrecognized as a gamepad or isn't connected, this function will always\nreturn 0.\n@param axis The virtual axis to be checked.\n@return number Current value of the axis.
getGamepadMapping Joystick:getGamepadMapping(axis)\nGets the button, axis or hat that a virtual gamepad input is bound to.\n@param axis The virtual gamepad axis to get the binding for.\n@return JoystickInputType The type of input the virtual gamepad axis is\nbound to.\n@return number The index of the Joystick's button, axis or hat that the\nvirtual gamepad axis is bound to.\n@return JoystickHat The direction of the hat, if the virtual gamepad\naxis is bound to a hat. nil otherwise.
getGravity World:getGravity()\nGet the gravity of the world.\n@return number The x component of gravity.\n@return number The y component of gravity.
getGravityScale Body:getGravityScale()\nReturns the gravity scale factor.\n@return number The gravity scale factor.
getGroundAnchors PulleyJoint:getGroundAnchors()\nGet the ground anchor positions in world coordinates.\n@return number The x coordinate of the first anchor.\n@return number The y coordinate of the first anchor.\n@return number The x coordinate of the second anchor.\n@return number The y coordinate of the second anchor.
getGroupIndex Fixture:getGroupIndex()\nReturns the group the fixture belongs to. Fixtures with the same group\nwill always collide if the group is positive or never collide if it's\nnegative. The group zero means no group.\n\nThe groups range from -32768 to 32767.\n@return number The group of the fixture.
getHat Joystick:getHat(hat)\nGets the direction of a hat.\n@param hat The index of the hat to be checked.\n@return JoystickHat The direction the hat is pushed.
getHatCount Joystick:getHatCount()\nGets the number of hats on the joystick.\n@return number How many hats the joystick has.
getHeight Canvas:getHeight()\nGets the height of the Canvas.\n@return number The height of the Canvas, in pixels.
getHeight CompressedData:getHeight()\nGets the height of the CompressedData.\n@return number The height of the CompressedData.
getHeight Font:getHeight()\nGets the height of the Font. The height of the font is the size including\nany spacing; the height which it will need.\n@return number The height of the Font in pixels.
getHeight Image:getHeight()\nGets the height of the Image.\n@return number The height of the Image, in pixels.
getHeight ImageData:getHeight()\nGets the height of the ImageData.\n@return number The height of the ImageData.
getHeight love.graphics.getHeight()\nGets the height of the window.\n@return number The height of the window.
getHeight love.window.getHeight()\nGets the height of the window.\n@return number The height of the window.
getID Joystick:getID()\nGets the joystick's unique identifier. The identifier will remain the\nsame for the life of the game, even when the Joystick is disconnected\nand reconnected, but it will change when the game is re-launched.\n@return number The Joystick's unique identifier. Remains the same as\nlong as the game is running.\n@return number Unique instance identifier. Changes every time the Joystick\nis reconnected. nil if the Joystick is not connected.
getIcon love.window.getIcon()\nGets the window icon.\n@return ImageData The window icon imagedata, or nil of no icon has been\nset with love.window.setIcon.
getIdentity love.filesystem.getIdentity(name)\nGets the write directory name for your game. Note that this only returns\nthe name of the folder to store your files in, not the full location.\n@param name The identity that is used as write directory.
getImageData Canvas:getImageData()\nReturns the image data stored in the Canvas. Think of it as taking a\nscreenshot of the hidden screen that is the Canvas.\n@return ImageData The image data stored in the Canvas.
getInertia Body:getInertia()\nGets the rotational inertia of the body.\n\nThe rotational inertia is how hard is it to make the body spin. It\nis set with the 4th argument to Body:setMass, or automatically with\nBody:setMassFromShapes.\n@return number The rotational inertial of the body.
getInsertMode ParticleSystem:getInsertMode()\nGets the mode to use when the ParticleSystem adds new particles.\n@return ParticleInsertMode The mode to use when the ParticleSystem adds\nnew particles.
getJointAngle RevoluteJoint:getJointAngle()\nGet the current joint angle.\n@return number The joint angle in radians.
getJointCount World:getJointCount()\nGet the number of joints in the world.\n@return number The number of joints in the world.
getJointList Body:getJointList()\nReturns a table containing the Joints attached to this Body.\n@return table A sequence with the Joints attached to the Body.
getJointList World:getJointList()\nReturns a table with all joints.\n@return table A sequence with all joints.
getJointSpeed PrismaticJoint:getJointSpeed()\nGet the current joint angle speed.\n@return number Joint angle speed in meters/second.
getJointSpeed RevoluteJoint:getJointSpeed()\nGet the current joint angle speed.\n@return number Joint angle speed in radians/second.
getJointTranslation PrismaticJoint:getJointTranslation()\nGet the current joint translation.\n@return number Joint translation, usually in meters.
getJoints GearJoint:getJoints()\nGet the Joints connected by this GearJoint.\n@return Joint The first connected Joint.\n@return Joint The second connected Joint.
getJoystickCount love.joystick.getJoystickCount()\nGets the number of connected joysticks.\n@return number The number of connected joysticks.
getJoysticks love.joystick.getJoysticks()\nGets a list of connected Joysticks.\n@return table The list of currently connected Joysticks.
getKeyFromScancode love.keyboard.getKeyFromScancode(scancode)\nGets the key corresponding to the given hardware scancode.\n\nThe location of a key is based on the keyboard's current language layout,\nwhereas scancodes are the layout-independent representations of where\nthe physical keys are.\n\nFor example, the key located where "q" is on a U.S. keyboard has the\nscancode "q". When using a U.S. keyboard layout it produces the key "q",\nbut when using a French keyboard layout it produces the key "a".\n\nScancodes are useful for creating default controls that have the same\nphysical locations on on all systems.\n@param scancode The scancode to get the key from.\n@return KeyConstant The key corresponding to the given scancode, or\n"unknown" if the scancode doesn't map to a KeyConstant on the current\nsystem.
getLastModified love.filesystem.getLastModified(filename)\nGets the last modification time of a file.\n@param filename The path and name to a file.\n@return number The last modification time in seconds since the unix\nepoch or nil on failure.\n@return string The error message on failure.
getLength DistanceJoint:getLength()\nGets the equilibrium distance between the two Bodies.\n@return number The length between the two Bodies.
getLengthA PulleyJoint:getLengthA()\nGet the current length of the rope segment attached to the first body.\n@return number The length of the rope segment.
getLengthB PulleyJoint:getLengthB()\nGet the current length of the rope segment attached to the second body.\n@return number The length of the rope segment.
getLimits PrismaticJoint:getLimits()\nGets the joint limits.\n@return number The lower limit, usually in meters.\n@return number The upper limit, usually in meters.
getLimits RevoluteJoint:getLimits()\nGets the joint limits.\n@return number The lower limit, in radians.\n@return number The upper limit, in radians.
getLineHeight Font:getLineHeight()\nGets the line height. This will be the value previously set by\nFont:setLineHeight, or 1.0 by default.\n@return number The current line height.
getLineJoin love.graphics.getLineJoin()\nGets the line join style.\n@return LineJoin The LineJoin style.
getLineStyle love.graphics.getLineStyle()\nGets the line style.\n@return LineStyle The current line style.
getLineWidth love.graphics.getLineWidth()\nGets the current line width.\n@return number The current line width.
getLinearAcceleration ParticleSystem:getLinearAcceleration()\nGets the linear acceleration (acceleration along the x and y axes)\nfor particles.\n\nEvery particle created will accelerate along the x and y axes between\nxmin,ymin and xmax,ymax.\n@return number The minimum acceleration along the x axis.\n@return number The minimum acceleration along the y axis.\n@return number The maximum acceleration along the x axis.\n@return number The maximum acceleration along the y axis.
getLinearDamping Body:getLinearDamping()\nGets the linear damping of the Body.\n\nThe linear damping is the rate of decrease of the linear velocity over\ntime. A moving body with no damping and no external forces will continue\nmoving indefinitely, as is the case in space. A moving body with damping\nwill gradually stop moving.\n\nDamping is not the same as friction - they can be modelled\ntogether. However, only damping is provided by Box2D (and LÖVE).\n@return number The value of the linear damping.
getLinearDamping ParticleSystem:getLinearDamping()\nGets the amount of linear damping (constant deceleration) for particles.\n@return number The minimum amount of linear damping applied to particles.\n@return number The maximum amount of linear damping applied to particles.
getLinearVelocity Body:getLinearVelocity()\nGets the linear velocity of the Body from its center of mass.\n\nThe linear velocity is the rate of change of position over time.\n\nIf you need the rate of change of angle over time, use\nBody:getAngularVelocity. If you need to get the linear velocity of a\npoint different from the center of mass:\n\nBody:getLinearVelocityFromLocalPoint allows you to specify the point in\nlocal coordinates.  Body:getLinearVelocityFromWorldPoint allows you to\nspecify the point in world coordinates.\n@return number The x component of the velocity vector.\n@return number The y component of the velocity vector.
getLinearVelocityFromLocalPoint Body:getLinearVelocityFromLocalPoint(x,y)\nGet the linear velocity of a point on the body.\n\nThe linear velocity for a point on the body is the velocity of the body\ncenter of mass plus the velocity at that point from the body spinning.\n\nThe point on the body must given in local coordinates. Use\nBody:getLinearVelocityFromWorldPoint to specify this with world\ncoordinates.\n@param x The x position to measure velocity.\n@param y The y position to measure velocity.\n@return number The x component of velocity at point (x,y).\n@return number The y component of velocity at point (x,y).
getLinearVelocityFromWorldPoint Body:getLinearVelocityFromWorldPoint(x,y)\nGet the linear velocity of a point on the body.\n\nThe linear velocity for a point on the body is the velocity of the body\ncenter of mass plus the velocity at that point from the body spinning.\n\nThe point on the body must given in world coordinates. Use\nBody:getLinearVelocityFromLocalPoint to specify this with local\ncoordinates.\n@param x The x position to measure velocity.\n@param y The y position to measure velocity.\n@return number The x component of velocity at point (x,y).\n@return number The y component of velocity at point (x,y).
getLocalCenter Body:getLocalCenter()\nGet the center of mass position in local coordinates.\n\nUse Body:getWorldCenter to get the center of mass in world coordinates.\n@return number The x coordinate of the center of mass.\n@return number The y coordinate of the center of mass.
getLocalPoint Body:getLocalPoint(world_x,world_y)\nTransform a point from world coordinates to local coordinates.\n@param world_x The x position in world coordinates.\n@param world_y The y position in world coordinates.\n@return number The x position in local coordinates.\n@return number The y position in local coordinates.
getLocalVector Body:getLocalVector(world_x,world_y)\nTransform a vector from world coordinates to local coordinates.\n@param world_x The vector x component in world coordinates.\n@param world_y The vector y component in world coordinates.\n@return number The vector x component in local coordinates.\n@return number The vector y component in local coordinates.
getLowerLimit PrismaticJoint:getLowerLimit()\nGets the lower limit.\n@return number The lower limit, usually in meters.
getLowerLimit RevoluteJoint:getLowerLimit()\nGets the lower limit.\n@return number The lower limit, in radians.
getMask Fixture:getMask()\nReturns the category mask of the fixture.\n@return number The first category selected by the mask.\n@return number The second category selected by the mask.\n@return number Additional categories selected by the mask.
getMass Body:getMass()\nGet the mass of the body.\n@return number The mass of the body (in kilograms).
getMassData Body:getMassData()\nReturns the mass, its center, and the rotational inertia.\n@return number The x position of the center of mass.\n@return number The y position of the center of mass.\n@return number The mass of the body.\n@return number The rotational inertia.
getMassData Fixture:getMassData()\nReturns the mass, its center and the rotational inertia.\n@return number The x position of the center of mass.\n@return number The y position of the center of mass.\n@return number The mass of the fixture.\n@return number The rotational inertia.
getMaxForce FrictionJoint:getMaxForce()\nGets the maximum friction force in Newtons.\n@return number Maximum force in Newtons.
getMaxForce MouseJoint:getMaxForce()\nGets the highest allowed force.\n@return number The max allowed force.
getMaxLength RopeJoint:getMaxLength()\nGets the maximum length of a RopeJoint.\n@return number The maximum length of the RopeJoint.
getMaxLengths PulleyJoint:getMaxLengths()\nGet the maximum lengths of the rope segments.\n@return number The maximum length of the first rope segment.\n@return number The maximum length of the second rope segment.
getMaxMotorForce PrismaticJoint:getMaxMotorForce()\nGets the maximum motor force.\n@return number The maximum motor force, usually in N.
getMaxMotorTorque RevoluteJoint:getMaxMotorTorque()\nGets the maximum motor force.\n@return number The maximum motor force, in Nm.
getMaxTorque FrictionJoint:getMaxTorque()\nGets the maximum friction torque in Newton-meters.\n@return number Maximum torque in Newton-meters.
getMeter love.physics.getMeter()\nGet the scale of the world.\n\nThe world scale is the number of pixels per meter. Try to keep your\nshape sizes less than 10 times this scale.\n\nThis is important because the physics in Box2D is tuned to work well for\nobjects of size 0.1m up to 10m. All physics coordinates are divided by\nthis number for the physics calculations.\n@return number The size of 1 meter in pixels.
getMipmapCount CompressedData:getMipmapCount(mipmaps)\nGets the number of mipmap levels in the CompressedData. The base mipmap\nlevel (original image) is included in the count.\n\nMipmap filtering cannot be activated for an Image created from a\nCompressedData which does not have enough mipmap levels to go down to\n1x1. For example, a 256x256 image created from a CompressedData should\nhave 8 mipmap levels or Image:setMipmapFilter will error. Most tools\nwhich can create compressed textures are able to automatically generate\nmipmaps for them in the same file.\n@param mipmaps The number of mipmap levels stored in the CompressedData.
getMipmapFilter Image:getMipmapFilter()\nGets the mipmap filter mode for an Image.\n@return FilterMode The filter mode used in between mipmap levels. nil\nif mipmap filtering is not enabled.\n@return number Value used to determine whether the image should use more\nor less detailed mipmap levels than normal when drawing.
getMode File:getMode()\nGets the FileMode the file has been opened with.\n@return FileMode The mode this file has been opened with.
getMode love.window.getMode()\nReturns the current display mode.\n@return number Window width.\n@return number Window height.\n@return table Table containing the window properties.
getMotorForce PrismaticJoint:getMotorForce()\nGet the current motor force.\n@return number The current motor force, usually in N.
getMotorSpeed PrismaticJoint:getMotorSpeed()\nGets the motor speed.\n@return number The motor speed, usually in meters per second.
getMotorSpeed RevoluteJoint:getMotorSpeed()\nGets the motor speed.\n@return number The motor speed, radians per second.
getMotorTorque RevoluteJoint:getMotorTorque()\nGet the current motor force.\n@return number The current motor force, in Nm.
getName Joystick:getName()\nGets the name of the joystick.\n@return string The name of the joystick.
getNormal Contact:getNormal()\nGet the normal vector between two shapes that are in contact.\n\nThis function returns the coordinates of a unit vector that points from\nthe first shape to the second.\n@return number The x component of the normal vector.\n@return number The y component of the normal vector.
getOS love.system.getOS()\nGets the current operating system. In general, LÖVE abstracts away the\nneed to know the current operating system, but there are a few cases\nwhere it can be useful (especially in combination with os.execute.)\n@return string The current operating system. "OS X", "Windows", or\n"Linux".
getOffset ParticleSystem:getOffset()\nGet the offget position which the particle sprite is rotated around. If\nthis function is not used, the particles rotate around their center.\n@return number The x coordinate of the rotation offget.\n@return number The y coordinate of the rotation offget.
getOrientation love.audio.getOrientation()\nReturns the orientation of the listener.\n@return number The X component of the forward vector of the listener\norientation.\n@return number The Y component of the forward vector of the listener\norientation.\n@return number The Z component of the forward vector of the listener\norientation.\n@return number The X component of the up vector of the listener\norientation.\n@return number The Y component of the up vector of the listener\norientation.\n@return number The Z component of the up vector of the listener\norientation.
getParticleLifetime ParticleSystem:getParticleLifetime()\nGets the life of the particles.\n@return number The minimum life of the particles (seconds).\n@return number The maximum life of the particles (seconds).
getPitch Source:getPitch()\nGets the current pitch of the Source.\n@return number The pitch, where 1.0 is normal.
getPixel Canvas:getPixel(x,y)\nGets the pixel at the specified position from a Canvas.\n\nValid x and y values start at 0 and go up to canvas width and height\nminus 1.\n@param x The position of the pixel on the x-axis.\n@param y The position of the pixel on the y-axis.\n@return number The red component (0-255).\n@return number The green component (0-255).\n@return number The blue component (0-255).\n@return number The alpha component (0-255).
getPixel ImageData:getPixel(x,y)\nGets the pixel at the specified position.\n\nValid x and y values start at 0 and go up to image width and height\nminus 1.\n@param x The position of the pixel on the x-axis.\n@param y The position of the pixel on the y-axis.\n@return number The red component (0-255).\n@return number The green component (0-255).\n@return number The blue component (0-255).\n@return number The alpha component (0-255).
getPixelScale love.window.getPixelScale()\nGets the scale factor associated with the window. In Mac OS X with the\nwindow in a retina screen and the highdpi window flag enabled this will\nbe 2.0, otherwise it will be 1.0.\n\nThe scale factor is used to display graphics at a size the user is\nexpecting, rather than the size of the pixels. On retina displays\nwith the highdpi window flag enabled, the pixels in the window are\n2x smaller than the scale of the normal content on the screen, so\nlove.window.getPixelScale will return 2.\n\nThe units of love.graphics.getWidth, love.graphics.getHeight,\nlove.mouse.getPosition, and mouse events are always in terms of pixels.\n@return number The pixel scale factor associated with the window.
getPoint ChainShape:getPoint(index)\nReturns a point of the shape.\n@param index The index of the point to return.\n@return number The x-coordinate of the point.\n@return number The y-coordinate of the point.
getPoint CircleShape:getPoint()\nGets the center point of the circle shape.\n@return number The x-component of the center point of the circle.\n@return number The y-component of the center point of the circle.
getPointSize love.graphics.getPointSize()\nGets the point size.\n@return number The current point size.
getPointStyle love.graphics.getPointStyle()\nGets the current point style.\n@return PointStyle The current point style.
getPointer Data:getPointer()\nGets a pointer to the Data.\n@return light userdata A raw pointer to the Data.
getPoints ChainShape:getPoints()\nReturns all points of the shape.\n@return number The x-coordinate of the first point.\n@return number The y-coordinate of the first point.\n@return number The x-coordinate of the second point.\n@return number The y-coordinate of the second point.\n@return number Additional x and y values.
getPoints EdgeShape:getPoints()\nReturns the local coordinates of the edge points.\n@return number The x component of the first vertex.\n@return number The y component of the first vertex.\n@return number The x component of the second vertex.\n@return number The y component of the second vertex.
getPoints PolygonShape:getPoints()\nGet the local coordinates of the polygon's vertices.\n\nThis function has a variable number of return values. It can be used in\na nested fashion with love.graphics.polygon.\n\nThis function may have up to 16 return values, since it returns two\nvalues for each vertex in the polygon. In other words, it can return\nthe coordinates of up to 8 points.\n@return number The x component of the first vertex.\n@return number The y component of the first vertex.\n@return number The x component of the second vertex.\n@return number The y component of the second vertex.\n@return number Additional x and y values.
getPosition Body:getPosition()\nGet the position of the body.\n\nNote that this may not be the center of mass of the body.\n@return number The x position.\n@return number The y position.
getPosition ParticleSystem:getPosition()\nGets the position of the emitter.\n@return number Position along x-axis.\n@return number Position along y-axis.
getPosition Source:getPosition()\nGets the position of the Source.\n@return number The X position of the Source.\n@return number The Y position of the Source.\n@return number The Z position of the Source.
getPosition love.audio.getPosition()\nReturns the position of the listener.\n@return number The X position of the listener.\n@return number The Y position of the listener.\n@return number The Z position of the listener.
getPosition love.mouse.getPosition()\nReturns the current position of the mouse.\n@return number The position of the mouse along the x-axis.\n@return number The position of the mouse along the y-axis.
getPosition love.window.getPosition()\nGets the position of the window on the screen.\n\nThe window position is in the coordinate space of the display it is\ncurrently in.\n@return number The x-coordinate of the window's position.\n@return number The y-coordinate of the window's position.\n@return number The index of the display that the window is in.
getPositions Contact:getPositions()\nReturns the contact points of the two colliding fixtures. There can be\none or two points.\n@return number The x coordinate of the first contact point.\n@return number The y coordinate of the first contact point.\n@return number The x coordinate of the second contact point.\n@return number The y coordinate of the second contact point.
getPowerInfo love.system.getPowerInfo()\nGets information about the system's power supply.\n@return PowerState The basic state of the power supply.\n@return number Percentage of battery life left, between 0 and 100. nil\nif the value can't be determined or there's no battery.\n@return number Seconds of battery life left. nil if the value can't be\ndetermined or there's no battery.
getProcessorCount love.system.getProcessorCount()\nGets the number of CPU cores in the system.\n\nThe number includes the threads reported if technologies such as\nIntel's Hyper-threading are enabled. For example, on a 4-core CPU with\nHyper-threading, this function will return 8.\n@return number Gets the number of CPU cores in the system.
getRadialAcceleration ParticleSystem:getRadialAcceleration()\nGet the radial acceleration (away from the emitter).\n@return number The minimum acceleration.\n@return number The maximum acceleration.
getRadius CircleShape:getRadius()\nGets the radius of the circle shape.\n@return number The radius of the circle.
getRandomSeed love.math.getRandomSeed()\nGets the seed of the random number generator.\n\nThe state is split into two numbers due to Lua's use of doubles for\nall number values - doubles can't accurately represent integer values\nabove 2^53.\n@return number Integer number representing the lower 32 bits of the\nrandom number generator's 64 bit state value.\n@return number Integer number representing the higher 32 bits of the\nrandom number generator's 64 bit state value.
getRandomState love.math.getRandomState()\nGets the current state of the random number generator. This returns an\nopaque implementation-dependent string which is only useful for later\nuse with RandomGenerator:setState.\n\nThis is different from RandomGenerator:getSeed in that getState gets\nthe RandomGenerator's current state, whereas getSeed gets the previously\nset seed number.\n\nThe value of the state string does not depend on the current operating\nsystem.\n@return string The current state of the RandomGenerator object,\nrepresented as a string.
getRatio GearJoint:getRatio()\nGet the ratio of a gear joint.\n@return number The ratio of the joint.
getRatio PulleyJoint:getRatio()\nGet the pulley ratio.\n@return number The pulley ratio of the joint.
getReactionForce Joint:getReactionForce()\nGets the reaction force on Body 2 at the joint anchor.\n@return number The x component of the force.\n@return number The y component of the force.
getReactionTorque Joint:getReactionTorque(invdt)\nReturns the reaction torque on the second body.\n@param invdt How long the force applies. Usually the inverse time step\nor 1/dt.\n@return number The reaction torque on the second body.
getRealDirectory love.filesystem.getRealDirectory(filepath)\nGets the platform-specific absolute path of the directory containing\na filepath.\n\nThis can be used to determine whether a file is inside the save directory\nor the game's source .love.\n@param filepath The filepath to get the directory of.\n@return string The platform-specific full path of the directory containing\nthe filepath.
getRelativeMode love.mouse.getRelativeMode()\nGets whether relative mode is enabled for the mouse.\n\nIf relative mode is enabled, the cursor is hidden and doesn't move when\nthe mouse does, but relative mouse motion events are still generated via\nlove.mousemoved. This lets the mouse move in any direction indefinitely\nwithout the cursor getting stuck at the edges of the screen.\n\nThe reported position of the mouse is not updated while relative mode\nis enabled, even when relative mouse motion events are generated.\n@return boolean True if relative mode is enabled, false if it's disabled.
getRendererInfo love.graphics.getRendererInfo()\nGets information about the system's video card and drivers.\n@return string The name of the renderer, e.g. "OpenGL".\n@return string The version of the renderer with some extra\ndriver-dependent version info, e.g. "2.1 INTEL-8.10.44".\n@return string The name of the graphics card vendor, e.g. "Intel Inc."\n@return string The name of the graphics card, e.g. "Intel HD Graphics\n3000 OpenGL Engine".
getRestitution Contact:getRestitution()\nGet the restitution between two shapes that are in contact.\n@return number The restitution between the two shapes.
getRestitution Fixture:getRestitution()\nReturns the restitution of the fixture.\n@return number The fixture restitution.
getRolloff Source:getRolloff()\nReturns the rolloff factor of the source.\n@return number The rolloff factor.
getRotation ParticleSystem:getRotation()\nGets the rotation of the image upon particle creation (in radians).\n@return number The minimum initial angle (radians).\n@return number The maximum initial angle (radians).
getSample SoundData:getSample(i)\nGets the sample at the specified position.\n@param i The position of the sample (0 means first sample).\n@return number The normalized sample (range -1.0 to 1.0).
getSampleCount SoundData:getSampleCount()\nReturns the sample count of the SoundData.\n@return number Total number of samples.
getSampleRate SoundData:getSampleRate()\nReturns the sample rate of the SoundData.\n@return number Number of samples per second.
getSaveDirectory love.filesystem.getSaveDirectory()\nGets the full path to the designated save directory. This can be useful\nif you want to use the standard io library (or something else) to read\nor write in the save directory.\n@return string The absolute path to the save directory.
getScancodeFromKey love.keyboard.getScancodeFromKey(key)\nGets the hardware scancode corresponding to the given key.\n\nThe location of a key is based on the keyboard's current language layout,\nwhereas scancodes are the layout-independent representations of where\nthe physical keys are.\n\nFor example, the key located where "q" is on a U.S. keyboard has the\nscancode "q". When using a U.S. keyboard layout it produces the key "q",\nbut when using a French keyboard layout it produces the key "a".\n\nScancodes are useful for creating default controls that have the same\nphysical locations on on all systems.\n@param key The key to get the scancode from.\n@return Scancode The scancode corresponding to the given key, or\n"unknown" if the given key has no known physical representation on the\ncurrent system.
getScissor love.graphics.getScissor()\nGets the current scissor box.\n@return number The x component of the top-left point of the box.\n@return number The y component of the top-left point of the box.\n@return number The width of the box.\n@return number The height of the box.
getSeed RandomGenerator:getSeed()\nGets the state of the random number generator.\n\nThe state is split into two numbers due to Lua's use of doubles for\nall number values - doubles can't accurately represent integer values\nabove 2^53.\n@return number Integer number representing the lower 32 bits of the\nrandom number generator's 64 bit state value.\n@return number Integer number representing the higher 32 bits of the\nrandom number generator's 64 bit state value.
getShader love.graphics.getShader()\nReturns the current Shader. Returns nil if none is set.\n@return Shader The current Shader.
getShape Fixture:getShape()\nReturns the shape of the fixture. This shape is a reference to the\nactual data used in the simulation. It's possible to change its values\nbetween timesteps.\n\nDo not call any functions on this shape after the parent fixture has\nbeen destroyed. This shape will point to an invalid memory address and\nlikely cause crashes if you interact further with it.\n@return Shape The fixture's shape.
getSize Data:getSize()\nGets the size of the Data.\n@return number The size of the Data in bytes.
getSize File:getSize()\nReturns the file size.\n@return number The file size
getSize love.filesystem.getSize(filename)\nGets the size in bytes of a file.\n@param filename The path and name to a file.\n@return number The size in bytes of the file, or nil on failure.\n@return string The error message on failure.
getSizeVariation ParticleSystem:getSizeVariation()\nGets the degree of variation (0 meaning no variation and 1 meaning full\nvariation between start and end).\n@return number The degree of variation (0 meaning no variation and 1\nmeaning full variation between start and end).
getSizes ParticleSystem:getSizes()\nGets a series of sizes by which to scale a particle sprite. 1.0 is normal\nsize. The particle system will interpolate between each size evenly over\nthe particle's lifetime.\n\nAt least one size must be specified. A maximum of eight may be used.\n@return number The first size.\n@return number The second size.\n@return number Etc.
getSourceBaseDirectory love.filesystem.getSourceBaseDirectory()\nReturns the full path to the directory containing the .love file. If\nthe game is fused to the LÖVE executable, then the directory containing\nthe executable is returned.\n\nIf love.filesystem.isFused is true, the path returned by this function\ncan be passed to love.filesystem.mount, which will make the directory\ncontaining the main game (e.g. C:\Program Files\coolgame\) readable\nby love.filesystem.\n@return string The full platform-dependent path of the directory\ncontaining the .love file.
getSourceCount love.audio.getSourceCount()\nReturns the number of sources which are currently playing or paused.\n@return number The number of sources which are currently playing or\npaused.
getSpeed ParticleSystem:getSpeed()\nGets the speed of the particles.\n@return number The minimum linear speed of the particles.\n@return number The maximum linear speed of the particles.
getSpin ParticleSystem:getSpin()\nGets the spin of the sprite.\n@return number The minimum spin (radians per second).\n@return number The maximum spin (radians per second).
getSpinVariation ParticleSystem:getSpinVariation()\nGets the degree of variation (0 meaning no variation and 1 meaning full\nvariation between start and end).\n@return number The degree of variation (0 meaning no variation and 1\nmeaning full variation between start and end).
getSpread ParticleSystem:getSpread()\nGets the amount of spread for the system.\n@return number The amount of spread (radians).
getState RandomGenerator:getState()\nGets the current state of the random number generator. This returns an\nopaque implementation-dependent string which is only useful for later\nuse with RandomGenerator:setState.\n\nThis is different from RandomGenerator:getSeed in that getState gets\nthe RandomGenerator's current state, whereas getSeed gets the previously\nset seed number.\n\nThe value of the state string does not depend on the current operating\nsystem.\n@return string The current state of the RandomGenerator object,\nrepresented as a string.
getStats love.graphics.getStats()\nGets performance-related rendering statistics.\n@return number The number of draw calls made so far during the current\nframe. This includes all internal draw calls – for example, drawing\nsmooth lines takes two draw calls.\n@return number The number of times the active Canvas has been switched so\nfar during the current frame. This includes all internal canvas switches\n– for example, calling Canvas:clear if the Canvas isn't active will\ntrigger two canvas switches.\n@return number The estimated total size in bytes of video memory used\nby all loaded Images, Canvases, and Fonts.\n@return number The number of Image objects currently loaded.\n@return number The number of Canvas objects currently loaded.\n@return number The number of Font objects currently loaded.
getString Data:getString()\nGets the full Data as a string.\n@return string The raw data.
getSystemCursor love.mouse.getSystemCursor(ctype)\nGets a Cursor object representing a system-native hardware cursor.\n\n Hardware cursors are framerate-independent and work the same way as\n normal operating system cursors. Unlike drawing an image at the mouse's\n current coordinates, hardware cursors never have visible lag between\n when the mouse is moved and when the cursor position updates, even at\n low framerates.\n@param ctype The type of system cursor to get.\n@return Cursor The Cursor object representing the system cursor type.
getSystemLimit love.graphics.getSystemLimit(limittype)\nGets the system-dependent maximum value for a love.graphics feature.\n@param limittype The graphics feature to get the maximum value of.\n@return number The system-dependent max value for the feature.
getTangentialAcceleration ParticleSystem:getTangentialAcceleration()\nGets the tangential acceleration (acceleration perpendicular to the\nparticle's direction).\n@return number The minimum acceleration.\n@return number The maximum acceleration.
getTarget MouseJoint:getTarget()\nGets the target point.\n@return number The x component of the target.\n@return number The x component of the target.
getTexture Mesh:getTexture()\nGets the texture (Image or Canvas) used when drawing the Mesh.\n@return Texture The Image or Canvas to texture the Mesh with when drawing,\nor nil if none is set.
getTexture ParticleSystem:getTexture()\nGets the Image or Canvas which is to be emitted.\n@return Texture An Image or Canvas to use for the particle.
getTexture SpriteBatch:getTexture()\nReturns the Image or Canvas used by the SpriteBatch.\n@return Texture The Image or Canvas for the sprites.
getTime love.timer.getTime()\nReturns the value of a timer with an unspecified starting time. This\nfunction should only be used to calculate differences between points in\ntime, as the starting time of the timer is unknown.\n@return number The time in seconds.
getTitle love.window.getTitle()\nGets the window title.\n@return string The current window title.
getType Body:getType()\nReturns the type of the body.\n@return BodyType The body type.
getType Cursor:getType()\nGets the type of the Cursor.\n@return CursorType The type of the Cursor.
getType Joint:getType()\nGets an string representing the type.\n@return JointType A string with the name of the Joint type.
getType Shape:getType()\nGets a string representing the Shape. This function can be useful for\nconditional debug drawing.\n@return ShapeType The type of the Shape.
getUpperLimit PrismaticJoint:getUpperLimit()\nGets the upper limit.\n@return number The upper limit, usually in meters.
getUpperLimit RevoluteJoint:getUpperLimit()\nGets the upper limit.\n@return number The upper limit, in radians.
getUserData Body:getUserData()\nReturns the Lua value associated with this Body.\n\nUse this function in one thread only.\n@return value The Lua value associated with the Body.
getUserData Fixture:getUserData()\nReturns the Lua value associated with this fixture.\n\nUse this function in one thread only.\n@return mixed The Lua value associated with the fixture.
getUserData Joint:getUserData()\nReturns the Lua value associated with this Joint.\n@return mixed The Lua value associated with the Joint.
getUserDirectory love.filesystem.getUserDirectory()\nReturns the path of the user's directory.\n@return string The path of the user's directory.
getVelocity Source:getVelocity()\nGets the velocity of the Source.\n@return number The X part of the velocity vector.\n@return number The Y part of the velocity vector.\n@return number The Z part of the velocity vector.
getVelocity love.audio.getVelocity()\nReturns the velocity of the listener.\n@return number The X velocity of the listener.\n@return number The Y velocity of the listener.\n@return number The Z velocity of the listener.
getVersion love.getVersion()\nGets the current running version of LÖVE.\n@return number The major version of LÖVE, e.g. 0 for version 0.9.1.\n@return number The minor version of LÖVE, e.g. 9 for version 0.9.1.\n@return number The revision version of LÖVE, e.g. 1 for version 0.9.1.\n@return string The codename of the current version.
getVertex Mesh:getVertex(i)\nReturns vertex information from the Mesh.\n@param i The index of the the vertex you want to retrieve the information\nfor.\n@return number The x vertex coordinate.\n@return number The y vertex coordinate.\n@return number The u vertex coordinate.\n@return number The v vertex coordinate.\n@return number The red color component.\n@return number The green color component.\n@return number The blue color component.\n@return number The alpha color component.
getVertexCount ChainShape:getVertexCount()\nReturns the number of vertices the shape has.\n@return number The number of vertices.
getVertexCount Mesh:getVertexCount()\nReturns the total number of vertices in the Mesh.\n@return number The total number of vertices in this Mesh.
getVertexMap Mesh:getVertexMap()\nGets the Mesh's vertex map.\n\n If no vertex map has been set previously (either in love.graphics.newMesh\n or with Mesh:setVertexMap), then this function will return the default\n vertex map: {1, 2, 3, ..., Mesh:getVertexCount()}.\n@return table A table containing a list of vertex indices used when\ndrawing.
getVertices Mesh:getVertices()\nGets all the vertices in the Mesh.\n\nThis method can be slow if the Mesh has a large number of vertices. Keep\nthe original table used to create the Mesh around and update it when\nnecessary instead of using this method frequently, if possible.\n@return table The table filled with vertex information tables.
getVibration Joystick:getVibration()\nGets the current vibration motor strengths on a Joystick with rumble\nsupport.\n@return number Current strength of the left vibration motor on the\nJoystick.\n@return number Current strength of the right vibration motor on the\nJoystick.
getViewport Quad:getViewport()\nGets the current viewport of this Quad.\n@return number The top-left corner along the x-axis.\n@return number The top-right corner along the y-axis.\n@return number The width of the viewport.\n@return number The height of the viewport.
getVolume Source:getVolume()\nGets the current volume of the Source.\n@return number The volume of the Source, where 1.0 is normal volume.
getVolume love.audio.getVolume()\nReturns the master volume.\n@return number The current master volume.
getVolumeLimits Source:getVolumeLimits()\nReturns the volume limits of the source.\n@return number The minimum volume.\n@return number The maximum volume.
getWarnings Shader:getWarnings()\nReturns any warning and error messages from compiling the shader\ncode. This can be used for debugging your shaders if there's anything\nthe graphics hardware doesn't like.\n@return string Warning messages (if any).
getWidth Canvas:getWidth()\nGets the width of the Canvas.\n@return number The width of the Canvas, in pixels.
getWidth CompressedData:getWidth()\nGets the width of the CompressedData.\n@return number The width of the CompressedData.
getWidth Font:getWidth(line)\nDetermines the horizontal size a line of text needs. Does not support\nline-breaks.\n@param line A line of text.\n@return number The width of the line.
getWidth Image:getWidth()\nGets the width of the Image.\n@return number The width of the Image, in pixels.
getWidth ImageData:getWidth()\nGets the width of the ImageData.\n@return number The width of the ImageData.
getWidth love.graphics.getWidth()\nGets the width of the window.\n@return number The width of the window.
getWidth love.window.getWidth()\nGets the width of the window.\n@return number The width of the window.
getWorkingDirectory love.filesystem.getWorkingDirectory()\nGets the current working directory.\n@return string The current working directory.
getWorld Body:getWorld()\nGets the World the body lives in.\n@return World The world the body lives in.
getWorldCenter Body:getWorldCenter()\nGet the center of mass position in world coordinates.\n\nUse Body:getLocalCenter to get the center of mass in local coordinates.\n@return number The x coordinate of the center of mass.\n@return number The y coordinate of the center of mass.
getWorldPoint Body:getWorldPoint(local_x,local_y)\nTransform a point from local coordinates to world coordinates.\n@param local_x The x position in local coordinates.\n@param local_y The y position in local coordinates.\n@return number The x position in world coordinates.\n@return number The y position in world coordinates.
getWorldPoints Body:getWorldPoints(x1,y1,x2,y2,...)\nTransforms multiple points from local coordinates to world coordinates.\n@param x1 The x position of the first point.\n@param y1 The y position of the first point.\n@param x2 The x position of the second point.\n@param y2 The y position of the second point.\n@param ... More x and y points.\n@return number The transformed x position of the first point.\n@return number The transformed y position of the first point.\n@return number The transformed x position of the second point.\n@return number The transformed y position of the second point.\n@return number The transformed x and y positions of additional points.
getWorldVector Body:getWorldVector(local_x,local_y)\nTransform a vector from local coordinates to world coordinates.\n@param local_x The vector x component in local coordinates.\n@param local_y The vector y component in local coordinates.\n@return number The vector x component in world coordinates.\n@return number The vector y component in world coordinates.
getWrap Canvas:getWrap()\nGets the wrapping properties of a Canvas.\n\nThis function returns the currently set horizontal and vertical wrapping\nmodes for the Canvas.\n@return WrapMode Horizontal wrapping mode of the Canvas.\n@return WrapMode Vertical wrapping mode of the Canvas.
getWrap Font:getWrap(text,width)\nReturns how many lines text would be wrapped to. This function accounts\nfor newlines correctly (i.e. '\n')\n@param text The text that would be wrapped.\n@param width The width to which text should be wrapped.\n@return number The actual width the wrapped text.\n@return number The number of lines text was wrapped to.
getWrap Image:getWrap()\nGets the wrapping properties of an Image.\n\nThis function returns the currently set horizontal and vertical wrapping\nmodes for the image.\n@return WrapMode Horizontal wrapping mode of the image.\n@return WrapMode Vertical wrapping mode of the image.
getX Body:getX()\nGet the x position of the body in world coordinates.\n@return number The x position in world coordinates.
getX love.mouse.getX()\nReturns the current x position of the mouse.\n@return number The position of the mouse along the x-axis.
getY Body:getY()\nGet the y position of the body in world coordinates.\n@return number The y position in world coordinates.
getY love.mouse.getY()\nReturns the current y position of the mouse.\n@return number The position of the mouse along the y-axis.
graphics love.graphics\nThe primary responsibility for the love.graphics module is the drawing\nof lines, shapes, text, Images and other Drawable objects onto the\nscreen. Its secondary responsibilities include loading external files\n(including Images and Fonts) into memory, creating specialized objects\n(such as ParticleSystems or Framebuffers) and managing screen geometry.\n\nLÖVE's coordinate system is rooted in the upper-left corner of the\nscreen, which is at location (0, 0). The x-axis is horizontal: larger\nvalues are further to the right. The y-axis is vertical: larger values\nare further towards the bottom.\n\nIn many cases, you draw images or shapes in terms of their upper-left\ncorner (See the picture above).\n\nMany of the functions are used to manipulate the graphics coordinate\nsystem, which is essentially the way coordinates are mapped to the\ndisplay. You can change the position, scale, and even rotation in\nthis way.
guide love.joystick.GamepadButton.guide\nGuide button.
h love.keyboard.KeyConstant.h\nThe H key
hand love.mouse.CursorType.hand\nHand symbol.
hasFocus love.window.hasFocus()\nChecks if the game window has keyboard focus.\n@return boolean True if the window has the focus or false if not.
hasGlyph Font:hasGlyph(character)\nGets whether the font can render a particular character.\n@param character A unicode character.\n@return boolean Whether the font can render the glyph represented by\nthe character.
hasKeyRepeat love.keyboard.hasKeyRepeat()\nGets whether key repeat is enabled.\n@return boolean Whether key repeat is enabled.
hasLimitsEnabled PrismaticJoint:hasLimitsEnabled()\nChecks whether the limits are enabled.\n@return boolean True if enabled, false otherwise.
hasLimitsEnabled RevoluteJoint:hasLimitsEnabled()\nChecks whether limits are enabled.\n@return boolean True if enabled, false otherwise.
hasMouseFocus love.window.hasMouseFocus()\nChecks if the game window has mouse focus.\n@return boolean True if the window has mouse focus or false if not.
hasRelativeRotation ParticleSystem:hasRelativeRotation()\nGets whether particle angles and rotations are relative to their\nvelocities. If enabled, particles are aligned to the angle of their\nvelocities and rotate relative to that angle.\n@return boolean True if relative particle rotation is enabled, false if\nit's disabled.
hasTextInput love.keyboard.hasTextInput()\nGets whether text input events are enabled.\n@return boolean Whether text input events are enabled.
hat love.joystick.JoystickInputType.hat\n8-direction hat value.
hdr love.graphics.CanvasFormat.hdr\nA format suitable for high dynamic range content - an alias for the\nrgba16f format, normally.
hdr love.graphics.TextureFormat.hdr\nOnly usable in Canvases. The HDR texture format: floating point 16 bits\nper channel (64 bpp) RGBA.
hdrcanvas love.graphics.GraphicsFeature.hdrcanvas\nSupport for HDR Canvas.
help love.keyboard.KeyConstant.help\nHelp key
home love.keyboard.KeyConstant.home\nHome key
i love.keyboard.KeyConstant.i\nThe I key
ibeam love.mouse.CursorType.ibeam\nAn I-beam, normally used when mousing over editable or selectable text.
image love.image\nProvides an interface to decode encoded image data.
image love.mouse.CursorType.image\nThe cursor is using a custom image.
insert love.keyboard.KeyConstant.insert\nInsert key
insertControlPoint BezierCurve:insertControlPoint(x,y,[i])\nInsert control point after the i-th control point. Indices start with\n1. Negative indices wrap around: -1 is the last control point, -2 the\none before the last, etc.\n@param x Position of the control point along the x axis.\n@param y Position of the control point along the y axis.\n@param i Index of the control point.
inverse love.audio.DistanceModel.inverse\nInverse distance attenuation.
isActive Body:isActive()\nReturns whether the body is actively used in the simulation.\n@return boolean True if the body is active or false if not.
isActive ParticleSystem:isActive()\nChecks whether the particle system is actively emitting particles.\n@return boolean True if system is active, false otherwise.
isAwake Body:isAwake()\nReturns the sleep status of the body.\n@return boolean True if the body is awake or false if not.
isBullet Body:isBullet()\nGet the bullet status of a body.\n\nThere are two methods to check for body collisions:\n\nat their location when the world is updated (default) using continuous\ncollision detection (CCD)\n\nThe default method is efficient, but a body moving very quickly may\nsometimes jump over another body without producing a collision. A body\nthat is set as a bullet will use CCD. This is less efficient, but is\nguaranteed not to jump when moving quickly.\n\nNote that static bodies (with zero mass) always use CCD, so your walls\nwill not let a fast moving body pass through even if it is not a bullet.\n@return boolean The bullet status of the body.
isCompressed love.image.isCompressed(filename)\nDetermines whether a file can be loaded as CompressedData.\n@param filename The filename of the potentially compressed image file.\n@return boolean Whether the file can be loaded as CompressedData or not.
isConnected Joystick:isConnected()\nGets whether the Joystick is connected.\n@return boolean True if the Joystick is currently connected, false\notherwise.
isConvex love.math.isConvex(vertices)\nChecks whether a polygon is convex.\n\nPolygonShapes in love.physics, some forms of Mesh, and polygons drawn\nwith love.graphics.polygon must be simple convex polygons.\n@param vertices The vertices of the polygon as a table in the form of {x1,\ny1, x2, y2, x3, y3, ...}.\n@return boolean Whether the given polygon is convex.
isCreated love.window.isCreated()\nChecks if the window has been created.\n@return boolean True if the window has been created, false otherwise.
isDestroyed Body:isDestroyed()\nGets whether the Body is destroyed. Destroyed bodies cannot be used.\n@return boolean Whether the Body is destroyed.
isDestroyed Fixture:isDestroyed()\nGets whether the Fixture is destroyed. Destroyed fixtures cannot be used.\n@return boolean Whether the Fixture is destroyed.
isDestroyed Joint:isDestroyed()\nGets whether the Joint is destroyed. Destroyed joints cannot be used.\n@return boolean Whether the Joint is destroyed.
isDestroyed World:isDestroyed()\nGets whether the World is destroyed. Destroyed worlds cannot be used.\n@return boolean Whether the World is destroyed.
isDirectory love.filesystem.isDirectory(path)\nCheck whether something is a directory.\n@param path The path to a potential directory.\n@return boolean True if there is a directory with the specified\nname. False otherwise.
isDown Joystick:isDown(...)\nChecks if a button on the Joystick is pressed.\n@param ... The index of a button to check.\n@return boolean True if any supplied button is down, false if not.
isDown love.keyboard.isDown(key)\nChecks whether a certain key is down. Not to be confused with\nlove.keypressed or love.keyreleased.\n@param key The key to check.\n@return boolean True if the key is down, false if not.
isDown love.mouse.isDown(button)\nChecks whether a certain mouse button is down. This function does not\ndetect mousewheel scrolling; you must use the love.mousepressed callback\nfor that.\n@param button The button to check.\n@return boolean True if the specified button is down.
isDynamic Body:isDynamic()\nGet the dynamic status of the body.\n\nA static body has no mass and a constant position. It will not react to\ncollisions. Often used for walls.\n\nA dynamic body has mass and can move. It will react to collisions when\nthe world is updated.\n@return boolean The dynamic status of the body.
isEnabled Contact:isEnabled()\nReturns whether the contact is enabled. The collision will be ignored\nif a contact gets disabled in the post solve callback.\n@return boolean True if enabled, false otherwise.
isFile love.filesystem.isFile(path)\nCheck whether something is a file.\n@param path The path to a potential file.\n@return boolean True if there is a file with the specified name. False\notherwise.
isFixedRotation Body:isFixedRotation()\nReturns whether the body rotation is locked.\n@return boolean True if the body's rotation is locked or false if not.
isFrozen Body:isFrozen()\nGet the frozen status of the body.\n\nA body becomes frozen when it goes outside the world boundary. A frozen\nbody is no longer changed by World:update.\n@return boolean The frozen status of the body.
isFused love.filesystem.isFused()\nGets whether the game is in fused mode or not.\n\nIf a game is in fused mode, its save directory will be directly in the\nAppdata directory instead of Appdata/LOVE/. The game will also be able\nto load C Lua dynamic libraries which are located in the save directory.\n\nA game is in fused mode if the source .love has been fused to the\nexecutable (see Game Distribution), or if "--fused" has been given as\na command-line argument when starting the game.\n@return boolean True if the game is in fused mode, false otherwise.
isGamepad Joystick:isGamepad()\nGets whether the Joystick is recognized as a gamepad. If this is the\ncase, the Joystick's buttons and axes can be used in a standardized\nmanner across different operating systems and joystick models via\nJoystick:getGamepadAxis and related functions.\n\nLÖVE automatically recognizes most popular controllers with a similar\nlayout to the Xbox 360 controller as gamepads, but you can add more\nwith love.joystick.setGamepadMapping.\n@return boolean True if the Joystick is recognized as a gamepad, false\notherwise.
isGamepadDown Joystick:isGamepadDown(...)\nChecks if a virtual gamepad button on the Joystick is pressed. If the\nJoystick is not recognized as a Gamepad or isn't connected, then this\nfunction will always return false.\n@param ... The gamepad button to check.\n@return boolean True if any supplied button is down, false if not.
isGrabbed love.mouse.isGrabbed()\nChecks if the mouse is grabbed.\n@return boolean True if the cursor is grabbed, false if it is not.
isLocked World:isLocked()\nReturns if the world is updating its state.\n\nThis will return true inside the callbacks from World:setCallbacks.\n@return boolean Will be true if the world is in the process of updating\nits state.
isLooping Source:isLooping()\nReturns whether the Source will loop.\n@return boolean True if the Source will loop, false otherwise.
isMotorEnabled PrismaticJoint:isMotorEnabled()\nChecks whether the motor is enabled.\n@return boolean True if enabled, false if disabled.
isMotorEnabled RevoluteJoint:isMotorEnabled()\nChecks whether the motor is enabled.\n@return boolean True if enabled, false if disabled.
isOpen File:isOpen()\nGets whether the file is open.\n@return boolean True if the file is currently open, false otherwise.
isPaused ParticleSystem:isPaused()\nChecks whether the particle system is paused.\n@return boolean True if system is paused, false otherwise.
isPaused Source:isPaused()\nReturns whether the Source is paused.\n@return boolean True if the Source is paused, false otherwise.
isPlaying Source:isPlaying()\nReturns whether the Source is playing.\n@return boolean True if the Source is playing, false otherwise.
isRunning Thread:isRunning()\nReturns whether the thread is currently running.\n\nThreads which are not running can be (re)started with Thread:start.
isSensor Fixture:isSensor()\nReturns whether the fixture is a sensor.\n@return boolean If the fixture is a sensor.
isSleepingAllowed Body:isSleepingAllowed()\nReturns the sleeping behaviour of the body.\n@return boolean True if the body is allowed to sleep or false if not.
isSleepingAllowed World:isSleepingAllowed()\nReturns the sleep behaviour of the world.\n@return boolean True if the bodies are allowed to sleep or false if not.
isStatic Body:isStatic()\nGet the static status of the body.\n\nA static body has no mass and a constant position. It will not react to\ncollisions. Often used for walls.\n\nA dynamic body has mass and can move. It will react to collisions when\nthe world is updated.\n@return boolean The static status of the body.
isStatic Source:isStatic()\nReturns whether the Source is static.\n@return boolean True if the Source is static, false otherwise.
isStopped ParticleSystem:isStopped()\nChecks whether the particle system is stopped.\n@return boolean True if system is stopped, false otherwise.
isStopped Source:isStopped()\nReturns whether the Source is stopped.\n@return boolean True if the Source is stopped, false otherwise.
isSupported love.graphics.isSupported(supportN)\nChecks if certain graphics functions can be used.\n\nOlder and low-end systems do not always support all graphics extensions.\n@param supportN The graphics feature to check for.\n@return boolean True if everything is supported, false otherwise.
isSymlink love.filesystem.isSymlink(path)\nGets whether a filepath is actually a symbolic link.\n\nIf symbolic links are not enabled (via\nlove.filesystem.setSymlinksEnabled), this function will always return\nfalse.\n@param path The file or directory path to check.\n@return boolean True if the path is a symbolic link, false otherwise.
isTouching Contact:isTouching()\nReturns whether the two colliding fixtures are touching each other.\n@return boolean True if they touch or false if not.
isVibrationSupported Joystick:isVibrationSupported()\nGets whether the Joystick supports vibration.\n@return boolean True if rumble / force feedback vibration is supported\non this Joystick, false if not.
isVisible love.mouse.isVisible()\nChecks if the cursor is visible.\n@return boolean True if the cursor to visible, false if the cursor\nis hidden.
isVisible love.window.isVisible()\nChecks if the game window is visible.\n\nThe window is considered visible if it's not minimized and the program\nisn't hidden.\n@return boolean True if the window is visible or false if not.
isWireframe love.graphics.isWireframe()\nGets whether wireframe mode is used when drawing.\n@return boolean True if wireframe lines are used when drawing, false if\nit's not.
j love.keyboard.KeyConstant.j\nThe J key
joystick love.joystick\nProvides an interface to the user's joystick.
joystickadded love.joystickadded(joystick)\nCalled when a Joystick is connected.\n\nThis callback is also triggered after love.load for every Joystick which\nwas already connected when the game started up.\n@param joystick The newly connected Joystick object.
joystickaxis love.event.Event.joystickaxis\nJoystick axis motion
joystickaxis love.joystickaxis(joystick,axis,value)\nCalled when a joystick axis moves.\n@param joystick The joystick object.\n@param axis The axis number.\n@param value The new axis value.
joystickhat love.event.Event.joystickhat\nJoystick hat pressed
joystickhat love.joystickhat(joystick,hat,direction)\nCalled when a joystick hat direction changes.\n@param joystick The joystick object.\n@param hat The hat number.\n@param direction The new hat direction.
joystickpressed love.event.Event.joystickpressed\nJoystick pressed
joystickpressed love.joystickpressed(joystick,button)\nCalled when a joystick button is pressed.\n@param joystick The joystick number.\n@param button The button number.
joystickreleased love.event.Event.joystickreleased\nJoystick released
joystickreleased love.joystickreleased(joystick,button)\nCalled when a joystick button is released.\n@param joystick The joystick number.\n@param button The button number.
joystickremoved love.joystickremoved(joystick)\nCalled when a Joystick is disconnected.\n@param joystick The now-disconnected Joystick object.
jpg love.image.ImageFormat.jpg\nJPG image format.
k love.keyboard.KeyConstant.k\nThe K key
keyboard love.keyboard\nProvides an interface to the user's keyboard.
keypressed love.event.Event.keypressed\nKey pressed
keypressed love.keypressed(key,isrepeat)\nCallback function triggered when a key is pressed.\n\nKey repeat needs to be enabled with love.keyboard.setKeyRepeat for repeat\nkeypress events to be received.\n@param key Character of the key pressed.\n@param isrepeat Whether this keypress event is a repeat. The delay\nbetween key repeats depends on the user's system settings.
keyreleased love.event.Event.keyreleased\nKey released
keyreleased love.keyreleased(key)\nCallback function triggered when a key is released.\n@param key Character of the key released.
kinematic love.physics.BodyType.kinematic\nKinematic bodies only collide with dynamic bodies.
kp0 love.keyboard.KeyConstant.kp0\nThe numpad zero key
kp1 love.keyboard.KeyConstant.kp1\nThe numpad one key
kp2 love.keyboard.KeyConstant.kp2\nThe numpad two key
kp3 love.keyboard.KeyConstant.kp3\nThe numpad three key
kp4 love.keyboard.KeyConstant.kp4\nThe numpad four key
kp5 love.keyboard.KeyConstant.kp5\nThe numpad five key
kp6 love.keyboard.KeyConstant.kp6\nThe numpad six key
kp7 love.keyboard.KeyConstant.kp7\nThe numpad seven key
kp8 love.keyboard.KeyConstant.kp8\nThe numpad eight key
kp9 love.keyboard.KeyConstant.kp9\nThe numpad nine key
kpenter love.keyboard.KeyConstant.kpenter\nThe numpad enter key
l love.joystick.JoystickHat.l\nLeft
l love.keyboard.KeyConstant.l\nThe L key
l love.mouse.MouseConstant.l\nLeft mouse button.
lalt love.keyboard.KeyConstant.lalt\nLeft alt key
lctrl love.keyboard.KeyConstant.lctrl\nLeft control key
ld love.joystick.JoystickHat.ld\nLeft+Down
left love.graphics.AlignMode.left\nAlign text left.
left love.keyboard.KeyConstant.left\nLeft cursor key
leftshoulder love.joystick.GamepadButton.leftshoulder\nLeft bumper.
leftstick love.joystick.GamepadButton.leftstick\nLeft stick click button.
leftx love.joystick.GamepadAxis.leftx\nThe x-axis of the left thumbstick.
lefty love.joystick.GamepadAxis.lefty\nThe y-axis of the left thumbstick.
line love.filesystem.BufferMode.line\nLine buffering. Write and append operations are buffered until a newline\nis output or the buffer size limit is reached.
line love.graphics.DrawMode.line\nDraw outlined shape.
line love.graphics.line(x1,y1,x2,y2,...)\nDraws lines between points.\n@param x1 The position of first point on the x-axis.\n@param y1 The position of first point on the y-axis.\n@param x2 The position of second point on the x-axis.\n@param y2 The position of second point on the y-axis.\n@param ... You can continue passing point positions to draw a polyline.
linear love.audio.DistanceModel.linear\nLinear attenuation.
linear love.graphics.FilterMode.linear\nScale image with linear interpolation.
linearToGamma love.math.linearToGamma(lr,lg,lb)\nConverts a color from linear-space (RGB) to gamma-space (sRGB). This is\nuseful when storing linear RGB color values in an image, because the\nlinear RGB color space has less precision than sRGB for dark colors,\nwhich can result in noticeable color banding when drawing.\n\nIn general, colors chosen based on what they look like on-screen are\nalready in gamma-space and should not be double-converted. Colors\ncalculated using math are often in the linear RGB space.\n@param lr The red channel of the linear RGB color to convert.\n@param lg The green channel of the linear RGB color to convert.\n@param lb The blue channel of the linear RGB color to convert.\n@return number The red channel of the converted color in gamma sRGB space.\n@return number The green channel of the converted color in gamma sRGB\nspace.\n@return number The blue channel of the converted color in gamma sRGB\nspace.
lines File:lines()\nIterate over all the lines in a file\n@return function The iterator (can be used in for loops)
lines love.filesystem.lines(name)\nIterate over the lines in a file.\n@param name The name (and path) of the file.\n@return function A function that iterates over all the lines in the file.
lmeta love.keyboard.KeyConstant.lmeta\nLeft meta key
load love.filesystem.load(name)\nLoad a file (but not run it).\n@param name The name (and path) of the file.\n@return function The loaded chunk.
load love.load(arg)\nThis function is called exactly once at the beginning of the game.\n@param arg Command line arguments given to the game.
loadGamepadMappings love.joystick.loadGamepadMappings(filename)\nLoads a gamepad mappings string or file created with\nlove.joystick.saveGamepadMappings.\n@param filename The filename to load the mappings string from.
lshift love.keyboard.KeyConstant.lshift\nLeft shift key
lsuper love.keyboard.KeyConstant.lsuper\nLeft super key
lu love.joystick.JoystickHat.lu\nLeft+Up
m love.keyboard.KeyConstant.m\nThe M key
m love.mouse.MouseConstant.m\nMiddle mouse button.
mail love.keyboard.KeyConstant.mail\nMail key
mapPixel ImageData:mapPixel(pixelFunction)\nTransform an image by applying a function to every pixel.\n\nThis function is a higher order function. It takes another function as\na parameter, and calls it once for each pixel in the ImageData.\n\nThe function parameter is called with six parameters for each pixel in\nturn. The parameters are numbers that represent the x and y coordinates\nof the pixel and its red, green, blue and alpha values. The function\nparameter can return up to four number values, which become the new r,\ng, b and a values of the pixel. If the function returns fewer values,\nthe remaining components are set to 0.\n@param pixelFunction Function parameter to apply to every pixel.
math love.math\nProvides system-independent mathematical functions.
menu love.keyboard.KeyConstant.menu\nMenu key
minimize love.window.minimize()\nMinimizes the window to the system's task bar / dock.
mipmap love.graphics.GraphicsFeature.mipmap\nSupport for Mipmaps.
mirroredrepeat love.graphics.WrapMode.mirroredrepeat\nRepeat the image, flipping it each time it repeats. May produce better\nvisual results than the repeat mode when the image doesn't seamlessly\ntile.
miter love.graphics.LineJoin.miter\nMiter style.
mode love.keyboard.KeyConstant.mode\nMode key
mount love.filesystem.mount(archive,mountpoint)\nMounts a zip file or folder in the game's save directory for reading.\n@param archive The folder or zip file in the game's save directory\nto mount.\n@param mountpoint The new path the archive will be mounted to.\n@return boolean True if the archive was successfully mounted, false\notherwise.
mouse love.mouse\nProvides an interface to the user's mouse.
mouse love.physics.JointType.mouse\nA MouseJoint.
mousefocus love.event.Event.mousefocus\nWindow mouse focus gained or lost
mousefocus love.mousefocus(f)\nCallback function triggered when window receives or loses mouse focus.\n@param f Window mouse focus.
mousemoved love.mousemoved(x,y,dx,dy)\nCallback function triggered when the mouse is moved.\n@param x The mouse position on the x-axis.\n@param y The mouse position on the y-axis.\n@param dx The amount moved along the x-axis since the last time\nlove.mousemoved was called.\n@param dy The amount moved along the y-axis since the last time\nlove.mousemoved was called.
mousepressed love.event.Event.mousepressed\nMouse pressed
mousepressed love.mousepressed(x,y,button)\nCallback function triggered when a mouse button is pressed.\n@param x Mouse x position.\n@param y Mouse y position.\n@param button Mouse button pressed.
mousereleased love.event.Event.mousereleased\nMouse released
mousereleased love.mousereleased(x,y,button)\nCallback function triggered when a mouse button is released.\n@param x Mouse x position.\n@param y Mouse y position.\n@param button Mouse button released.
moveTo ParticleSystem:moveTo(x,y)\nMoves the position of the emitter. This results in smoother particle\nspawning behaviour than if ParticleSystem:setPosition is used every frame.\n@param x Position along x-axis.\n@param y Position along y-axis.
multicanvas love.graphics.GraphicsFeature.multicanvas\nSupport for simultaneous rendering to at least 4 canvases at once,\nwith love.graphics.setCanvas.
multicanvas love.graphics.GraphicsLimit.multicanvas\nThe maximum number of simultaneously active canvases (via\nlove.graphics.setCanvas).
multiplicative love.graphics.BlendMode.multiplicative\nMultiply blend mode.
n love.keyboard.KeyConstant.n\nThe N key
nearest love.graphics.FilterMode.nearest\nScale image with nearest neighbor interpolation.
newBezierCurve love.math.newBezierCurve(vertices)\nCreates a new BezierCurve object.\n\nThe number of vertices in the control polygon determines the degree of the\ncurve, e.g. three vertices define a quadratic (degree 2) Bézier curve,\nfour vertices define a cubic (degree 3) Bézier curve, etc.\n@param vertices The vertices of the control polygon as a table in the\nform of {x1, y1, x2, y2, x3, y3, ...}.\n@return BezierCurve A Bézier curve object.
newBody love.physics.newBody(world,[x],[y],[type])\nCreates a new body.\n\nThere are three types of bodies. Static bodies do not move, have a\ninfinite mass, and can be used for level boundaries. Dynamic bodies are\nthe main actors in the simulation, they collide with everything. Kinematic\nbodies do not react to forces and only collide with dynamic bodies.\n\nThe mass of the body gets calculated when a Fixture is attached\nor removed, but can be changed at any time with Body:setMass or\nBody:resetMassData.\n@param world The world to create the body in.\n@param x The x position of the body.\n@param y The y position of the body.\n@param type The type of the body.\n@return Body A new body.
newCanvas love.graphics.newCanvas([width],[height],[texture_type],[fsaa])\nCreates a new Canvas object for offscreen rendering.\n\nAntialiased Canvases have slightly higher system requirements than normal\nCanvases. Additionally, the supported maximum number of FSAA samples\nvaries depending on the system. Use love.graphics.getSystemLimit to check.\n\nIf the number of FSAA samples specified is greater than the maximum\nsupported by the system, the Canvas will still be created but only using\nthe maximum supported amount (this includes 0.)\n@param width The width of the Canvas.\n@param height The height of the Canvas.\n@param texture_type The desired texture mode of the Canvas.\n@param fsaa The desired number of antialiasing samples used when drawing\nto the Canvas.\n@return Canvas A new Canvas object.
newChainShape love.physics.newChainShape(loop,x1,y1,x2,y2)\nCreates a chain shape.\n@param loop If the chain should loop back to the first point.\n@param x1 The x position of the first point.\n@param y1 The y position of the first point.\n@param x2 The x position of the second point.\n@param y2 The y position of the second point.\n@return ChainShape The new shape.
newChannel love.thread.newChannel()\nCreate a new unnamed thread channel.\n\nOne use for them is to pass new unnamed channels to other threads via\nChannel:push\n@return Channel A unnamed channel object which can be further manipulated.
newCircleShape love.physics.newCircleShape(body,x,y,radius)\nCreate a new CircleShape at (x,y) in local coordinates.\n\nAnchors from the center of the shape by default.\n@param body The body to attach the shape to.\n@param x The x offset of the circle.\n@param y The y offset of the circle.\n@param radius The radius of the circle.\n@return CircleShape A new CircleShape.
newCompressedData love.image.newCompressedData(filename)\nCreate a new CompressedData object from a compressed image file. LÖVE\ncurrently supports DDS files compressed with the DXT1, DXT5, and BC5 /\n3Dc formats.\n@param filename The filename of the compressed image file.\n@return CompressedData The new CompressedData object.
newCursor love.mouse.newCursor(imageData,[hotx],[hoty])\nCreates a new hardware Cursor object from an image file or ImageData.\n\nHardware cursors are framerate-independent and work the same way as\nnormal operating system cursors. Unlike drawing an image at the mouse's\ncurrent coordinates, hardware cursors never have visible lag between\nwhen the mouse is moved and when the cursor position updates, even at\nlow frameratesn\n\nThe hot spot is the point the operating system uses to determine what\nwas clicked and at what position the mouse cursor is. For example, the\nnormal arrow pointer normally has its hot spot at the top left of the\nimage, but a crosshair cursor might have it in the middle.\n@param imageData The ImageData to use for the the new Cursor.\n@param hotx The x-coordinate in the ImageData of the cursor's hot spot.\n@param hoty The y-coordinate in the ImageData of the cursor's hot spot.\n@return Cursor The new Cursor object.
newDistanceJoint love.physics.newDistanceJoint(body1,body2,x1,y1,x2,y2,[collideConnected])\nCreate a distance joint between two bodies.\n\nThis joint constrains the distance between two points on two bodies to\nbe constant. These two points are specified in world coordinates and the\ntwo bodies are assumed to be in place when this joint is created. The\nfirst anchor point is connected to the first body and the second to the\nsecond body, and the points define the length of the distance joint.\n@param body1 The first body to attach to the joint.\n@param body2 The second body to attach to the joint.\n@param x1 The x position of the first anchor point.\n@param y1 The y position of the first anchor point.\n@param x2 The x position of the second anchor point.\n@param y2 The y position of the second anchor point.\n@param collideConnected Specifies whether the two bodies should collide\nwith each other.\n@return DistanceJoint The new distance joint.
newEdgeShape love.physics.newEdgeShape(x1,y1,x2,y2)\nCreates a edge shape.\n@param x1 The x position of the first point.\n@param y1 The y position of the first point.\n@param x2 The x position of the second point.\n@param y2 The y position of the second point.\n@return EdgeShape The new shape.
newFile love.filesystem.newFile(filename,[mode])\nCreates a new File object. It needs to be opened before it can be\naccessed.\n@param filename The filename of the file to read.\n@param mode The mode to open the file in.\n@return File The new File object, or nil if an error occurred.\n@return string The error string if an error occurred.
newFileData love.filesystem.newFileData(contents,name,[decoder])\nCreates a new FileData object.\n@param contents The contents of the file.\n@param name The name of the file.\n@param decoder The method to use when decoding the contents.\n@return FileData Your new FileData.
newFixture love.physics.newFixture(body,shape,[density])\nCreates and attaches a Fixture to a body.\n@param body The body which gets the fixture attached.\n@param shape The shape of the fixture.\n@param density The density of the fixture.\n@return Fixture The new fixture.
newFont love.graphics.newFont(filename,[size])\nCreates a new Font.\n@param filename The filepath to the font file.\n@param size The size of the font in pixels.\n@return Font A Font object which can be used to draw text on screen.
newFrictionJoint love.physics.newFrictionJoint(body1,body2,x,y,[collideConnected])\nCreate a friction joint between two bodies. A FrictionJoint applies\nfriction to a body.\n@param body1 The first body to attach to the joint.\n@param body2 The second body to attach to the joint.\n@param x The x position of the anchor point.\n@param y The y position of the anchor point.\n@param collideConnected Specifies whether the two bodies should collide\nwith eachother.\n@return FrictionJoint The new FrictionJoint.
newGearJoint love.physics.newGearJoint(joint1,joint2,[ratio],[collideConnected])\nCreate a gear joint connecting two joints.\n\nThe gear joint connects two joints that must be either prismatic or\nrevolute joints. Using this joint requires that the joints it uses\nconnect their respective bodies to the ground and have the ground as\nthe first body. When destroying the bodies and joints you must make sure\nyou destroy the gear joint before the other joints.\n\nThe gear joint has a ratio the determines how the angular or distance\nvalues of the connected joints relate to each other. The formula\ncoordinate1 + ratio * coordinate2 always has a constant value that is\nset when the gear joint is created.\n@param joint1 The first joint to connect with a gear joint.\n@param joint2 The second joint to connect with a gear joint.\n@param ratio The gear ratio.\n@param collideConnected Specifies whether the two bodies should collide\nwith each other.\n@return Joint The new gear joint.
newImage love.graphics.newImage(filename,[format])\nCreates a new Image.\n@param filename The filepath to the image file.\n@param format The format to interpret the image's data as.\n@return Image An Image object which can be drawn on screen.
newImageData love.image.newImageData(width,height)\nCreate a new ImageData object.\n@param width The width of the ImageData.\n@param height The height of the ImageData.\n@return ImageData The new ImageData object.
newImageFont love.graphics.newImageFont(filename,glyphs)\nCreates a new font by loading a specifically formatted image. There can\nbe up to 256 glyphs.\n\nExpects ISO 8859-1 encoding for the glyphs string.\n@param filename The filepath to the image file.\n@param glyphs A string of the characters in the image in order from left\nto right.\n@return Font A Font object which can be used to draw text on screen.
newMesh love.graphics.newMesh(vertices,[texture],[mode])\nCreates a new Mesh.\n@param vertices The table filled with vertex information tables.\n@param texture The Image or Canvas to use when drawing the Mesh. May be\nnil to use no texture.\n@param mode How the vertices are used when drawing. The default mode\n"fan" is sufficient for simple convex polygons.\n@return Mesh The new Mesh.
newMouseJoint love.physics.newMouseJoint(body,x,y)\nCreate a joint between a body and the mouse.\n\nThis joint actually connects the body to a fixed point in the world. To\nmake it follow the mouse, the fixed point must be updated every timestep\n(example below).\n\nThe advantage of using a MouseJoint instead of just changing a body\nposition directly is that collisions and reactions to other joints are\nhandled by the physics engine.\n@param body The body to attach to the mouse.\n@param x The x position of the connecting point.\n@param y The y position of the connecting point.\n@return Joint The new mouse joint.
newParticleSystem love.graphics.newParticleSystem(texture,buffer)\nCreates a new ParticleSystem.\n@param texture The Image or Canvas to use.\n@param buffer The max number of particles at the same time.\n@return ParticleSystem A new ParticleSystem.
newPolygonShape love.physics.newPolygonShape(body,...)\nCreates a new PolygonShape.  This shape can have 8 vertices at most,\nand must form a convex shape.\n@param body The body to attach the shape to.\n@param ... Vertices of the polygon.\n@return PolygonShape A new PolygonShape.
newPrismaticJoint love.physics.newPrismaticJoint(body1,body2,x,y,ax,ay,[collideConnected])\nCreate a prismatic joints between two bodies.\n\nA prismatic joint constrains two bodies to move relatively to each\nother on a specified axis. It does not allow for relative rotation. Its\ndefinition and operation are similar to a revolute joint, but with\ntranslation and force substituted for angle and torque.\n@param body1 The first body to connect with a prismatic joint.\n@param body2 The second body to connect with a prismatic joint.\n@param x The x coordinate of the anchor point.\n@param y The y coordinate of the anchor point.\n@param ax The x coordinate of the axis vector.\n@param ay The y coordinate of the axis vector.\n@param collideConnected Specifies whether the two bodies should collide\nwith each other.\n@return PrismaticJoint The new prismatic joint.
newPulleyJoint love.physics.newPulleyJoint(body1,body2,gx1,gy1,gx2,gy2,x1,y1,x2,y2,[ratio],[collideConnected])\nCreate a pulley joint to join two bodies to each other and the ground.\n\nThe pulley joint simulates a pulley with an optional block and tackle. If\nthe ratio parameter has a value different from one, then the simulated\nrope extends faster on one side than the other. In a pulley joint the\ntotal length of the simulated rope is the constant length1 + ratio *\nlength2, which is set when the pulley joint is created.\n\nPulley joints can behave unpredictably if one side is fully extended. It\nis recommended that the method setMaxLengths  be used to constrain the\nmaximum lengths each side can attain.\n@param body1 The first body to connect with a pulley joint.\n@param body2 The second body to connect with a pulley joint.\n@param gx1 The x coordinate of the first body's ground anchor.\n@param gy1 The y coordinate of the first body's ground anchor.\n@param gx2 The x coordinate of the second body's ground anchor.\n@param gy2 The y coordinate of the second body's ground anchor.\n@param x1 The x coordinate of the pulley joint anchor in the first body.\n@param y1 The y coordinate of the pulley joint anchor in the first body.\n@param x2 The x coordinate of the pulley joint anchor in the second body.\n@param y2 The y coordinate of the pulley joint anchor in the second body.\n@param ratio The joint ratio.\n@param collideConnected Specifies whether the two bodies should collide\nwith each other.\n@return Joint The new pulley joint.
newQuad love.graphics.newQuad(x,y,width,height,sw,sh)\nCreates a new Quad.\n\nThe purpose of a Quad is to describe the result of the following\ntransformation on any drawable object. The object is first scaled to\ndimensions sw * sh. The Quad then describes the rectangular area of\ndimensions width * height whose upper left corner is at position (x, y)\ninside the scaled object.\n@param x The top-left position along the x-axis.\n@param y The top-left position along the y-axis.\n@param width The width of the Quad.\n@param height The height of the Quad.\n@param sw The reference width, the width of the Image.\n@param sh The reference height, the height of the Image.\n@return Quad The new Quad.
newRandomGenerator love.math.newRandomGenerator()\nCreates a new RandomGenerator object which is completely independent of\nother RandomGenerator objects and random functions.\n@return RandomGenerator A Random Number Generator object.
newRectangleShape love.physics.newRectangleShape(body,x,y,width,height,[angle])\nShorthand for creating rectangluar PolygonShapes.\n\nThe rectangle will be created at (x,y) in local coordinates.\n\nAnchors from the center of the shape by default.\n@param body The Body to attach the Shape to.\n@param x The offset along the x-axis.\n@param y The offset along the y-axis.\n@param width The width of the rectangle.\n@param height The height of the rectangle.\n@param angle The initial angle of the rectangle.\n@return PolygonShape A new PolygonShape.
newRevoluteJoint love.physics.newRevoluteJoint(body1,body2,x,y,collideConnected)\nCreates a pivot joint between two bodies.\n\nThis joint connects two bodies to a point around which they can pivot.\n@param body1 The first body to connect with a Revolute Joint.\n@param body2 The second body to connect with a Revolute Joint.\n@param x The x position of the connecting point.\n@param y The y position of the connecting point.\n@param collideConnected Specifies whether the two bodies should collide\nwith each other.\n@return Joint The new revolute joint.
newRopeJoint love.physics.newRopeJoint(body1,body2,x1,y1,x2,y2,maxLength,[collideConnected])\nCreate a joint between two bodies. Its only function is enforcing a max\ndistance between these bodies.\n@param body1 The first body to attach to the joint.\n@param body2 The second body to attach to the joint.\n@param x1 The x position of the first anchor point.\n@param y1 The y position of the first anchor point.\n@param x2 The x position of the second anchor point.\n@param y2 The y position of the second anchor point.\n@param maxLength The maximum distance for the bodies.\n@param collideConnected Specifies whether the two bodies should collide\nwith each other.\n@return RopeJoint The new RopeJoint.
newScreenshot love.graphics.newScreenshot()\nCreates a screenshot and returns the image data.\n@return ImageData The image data of the screenshot.
newShader love.graphics.newShader(code)\nCreates a new Shader object for hardware-accelerated vertex and pixel\neffects. A Shader contains either vertex shader code, pixel shader code,\nor both.\n\nVertex shader code must contain at least one function, named position,\nwhich is the function that will produce transformed vertex positions of\ndrawn objects in screen-space.\n\nPixel shader code must contain at least one function, named effect,\nwhich is the function that will produce the color which is blended onto\nthe screen for each pixel a drawn object touches.\n@param code The pixel shader or vertex shader code, or a filename pointing\nto a file with the code.\n@return Shader A Shader object for use in drawing operations.
newSoundData love.sound.newSoundData(filename)\nCreates new SoundData from a file. It's also possible to create SoundData\nwith a custom sample rate, channel and bit depth.\n\nThe sound data will be decoded to the memory in a raw format. It is\nrecommended to create only short sounds like effects, as a 3 minute song\nuses 30 MB of memory this way.\n@param filename The filename of the file to load.\n@return SoundData A new SoundData object.
newSource love.audio.newSource(filename,[type])\nCreates a new Source from a file or SoundData. Sources created from\nSoundData are always static.\n@param filename The filepath to create a Source from.\n@param type Streaming or static source.\n@return Source A new Source that can play the specified audio.
newSpriteBatch love.graphics.newSpriteBatch(texture,[size],[usage])\nCreates a new SpriteBatch object.\n@param texture The Image or Canvas to use for the sprites.\n@param size The max number of sprites.\n@param usage The expected usage of the SpriteBatch.\n@return SpriteBatch The new SpriteBatch.
newThread love.thread.newThread(filename)\nCreates a new Thread from a File or Data object.\n@param filename The name of the Lua File to use as source.\n@return Thread A new Thread that has yet to be started.
newWeldJoint love.physics.newWeldJoint(body1,body2,x,y,[collideConnected])\nCreate a friction joint between two bodies. A WeldJoint essentially\nglues two bodies together.\n@param body1 The first body to attach to the joint.\n@param body2 The second body to attach to the joint.\n@param x The x position of the anchor point.\n@param y The y position of the anchor point.\n@param collideConnected Specifies whether the two bodies should collide\nwith each other.\n@return WeldJoint The new WeldJoint.
newWheelJoint love.physics.newWheelJoint(body1,body2,x,y,ax,ay,[collideConnected])\nCreates a wheel joint.\n@param body1 The first body.\n@param body2 The second body.\n@param x The x position of the anchor point.\n@param y The y position of the anchor point.\n@param ax The x position of the axis unit vector.\n@param ay The y position of the axis unit vector.\n@param collideConnected Specifies whether the two bodies should collide\nwith each other.\n@return WheelJoint The new WheelJoint.
newWorld love.physics.newWorld([xg],[yg],[sleep])\nCreates a new World.\n@param xg The x component of gravity.\n@param yg The y component of gravity.\n@param sleep Whether the bodies in this world are allowed to sleep.\n@return World A brave new World.
no love.mouse.CursorType.no\nSlashed circle or crossbones.
nobattery love.system.PowerState.nobattery\nPlugged in, no battery available.
noise love.math.noise(x)\nGenerates a Simplex noise value in 1-4 dimensions.\n\nSimplex noise is closely related to Perlin noise. It is widely used for\nprocedural content generation.\n@param x The number used to generate the noise value.\n@return number The noise value in the range of [0, 1].
none love.audio.DistanceModel.none\nSources do not get attenuated.
none love.filesystem.BufferMode.none\nNo buffering. The result of write and append operations appears\nimmediately.
none love.graphics.AreaSpreadDistribution.none\nNo distribution - area spread is disabled.
none love.graphics.LineJoin.none\nNone style.
normal love.graphics.AreaSpreadDistribution.normal\nNormal (gaussian) distribution.
normal love.graphics.CanvasFormat.normal\nThe default Canvas format - an alias for the rgba8 format, normally.
normal love.graphics.TextureFormat.normal\nThe default texture format: 8 bits per channel (32 bpp) RGBA.
normal love.window.FullscreenType.normal\nStandard fullscreen mode. Changes the display mode (actual resolution)\nof the monitor.
npot love.graphics.GraphicsFeature.npot\nSupport for textures with non-power-of-two textures.
numlock love.keyboard.KeyConstant.numlock\nNum-lock key
o love.keyboard.KeyConstant.o\nThe O key
open File:open(mode)\nOpen the file for write, read or append.\n\nIf you are getting the error message "Could not set write\ndirectory", try setting the save directory. This is done either with\nlove.filesystem.setIdentity or by setting the identity field in love.conf.\n@param mode The mode to open the file in.\n@return boolean True on success, false otherwise.
openURL love.system.openURL(url)\nOpens a URL with the user's web or file browser.\n@param url The URL to open. Must be formatted as a proper URL.\n\nTo open a file or folder, "file://" must be prepended to the path.\n@return boolean Whether the URL was opened successfully.
origin love.graphics.origin()\nResets the current coordinate transformation.\n\nThis function is always used to reverse any previous calls to\nlove.graphics.rotate, love.graphics.scale, love.graphics.shear or\nlove.graphics.translate. It returns the current transformation state to\nits defaults.
p love.keyboard.KeyConstant.p\nThe P key
pagedown love.keyboard.KeyConstant.pagedown\nPage down key
pageup love.keyboard.KeyConstant.pageup\nPage up key
paste ImageData:paste(source,dx,dy,sx,sy,sw,sh)\nPaste into ImageData from another source ImageData.\n@param source Source ImageData from which to copy.\n@param dx Destination top-left position on x-axis.\n@param dy Destination top-left position on y-axis.\n@param sx Source top-left position on x-axis.\n@param sy Source top-left position on y-axis.\n@param sw Source width.\n@param sh Source height.
pause ParticleSystem:pause()\nPauses the particle emitter.
pause Source:pause()\nPauses the Source.
pause love.audio.pause()\nPauses all audio
pause love.keyboard.KeyConstant.pause\nPause key
peek Channel:peek()\nRetrieves the value of a Channel message, but leaves it in the queue.\n\nThe value of the message can be a boolean, string, number or a LÖVE\nuserdata. It returns nil if there's no message in the queue.\n@return value The contents of the message.
physics love.physics\nCan simulate 2D rigid body physics in a realistic manner. This module\nis based on Box2D, and this API corresponds to the Box2D API as closely\nas possible.
play Source:play()\nStarts playing the Source.\n@return boolean True if the Source started playing successfully, false\notherwise.
play love.audio.play(source)\nPlays the specified Source.\n@param source The Source to play.
png love.image.ImageFormat.png\nPNG image format.
point love.graphics.point(x,y)\nDraws a point.\n\nThe pixel grid is actually offset to the center of each pixel. So to\nget clean pixels drawn use 0.5 + integer increments.\n@param x The position on the x-axis.\n@param y The position on the y-axis.
points love.graphics.MeshDrawMode.points\nThe vertices are drawn as unconnected points (see\nlove.graphics.setPointSize.)
pointsize love.graphics.GraphicsLimit.pointsize\nThe maximum size of points.
poll love.event.poll()\nReturns an iterator for messages in the event queue.\n@return function Iterator function usable in a for loop.
polygon love.graphics.polygon(mode,...)\nDraw a polygon.\n\nFollowing the mode argument, this function can accept multiple numeric\narguments or a single table of numeric arguments. In either case the\narguments are interpreted as alternating x and y coordinates of the\npolygon's vertices.\n\nWhen in fill mode, the polygon must be convex and simple or rendering\nartifacts may occur.\n@param mode How to draw the polygon.\n@param ... The vertices of the polygon.
polygon love.physics.ShapeType.polygon\nThe Shape is a PolygonShape.
pop Channel:pop()\nRetrieves the value of a Channel message and removes it from the message\nqueue.\n\nThe value of the message can be a boolean, string, number, LÖVE userdata,\nor a simple flat table. It returns nil if there are no messages in\nthe queue.\n@return value The contents of the message.
pop love.graphics.pop()\nPops the current coordinate transformation from the transformation stack.\n\nThis function is always used to reverse a previous push operation. It\nreturns the current transformation state to what it was before the last\npreceding push. For an example, see the description of love.graphics.push.
power love.keyboard.KeyConstant.power\nPower key
premultiplied love.graphics.BlendMode.premultiplied\nPremultiplied blend mode.
present love.graphics.present()\nDisplays the results of drawing operations on the screen.\n\nThis function is used when writing your own love.run function. It presents\nall the results of your drawing operations on the screen. See the example\nin love.run for a typical use of this function.
print love.graphics.print(text,x,y,[r],[sx],[sy],[ox],[oy],[kx],[ky])\nDraws text on screen. If no Font is set, one will be created and set\n(once) if needed.\n\nWhen using translation and scaling functions while drawing text, this\nfunction assumes the scale occurs first. If you don't script with this in\nmind, the text won't be in the right position, or possibly even on screen.\n\nlove.graphics.print stops at the first ' ' (null) character. This can bite\nyou if you are appending keystrokes to form your string, as some of those\nare multi-byte unicode characters which will likely contain null bytes.\n@param text The text to draw.\n@param x The position to draw the object (x-axis).\n@param y The position to draw the object (y-axis).\n@param r Orientation (radians).\n@param sx Scale factor (x-axis).\n@param sy Scale factor (y-axis).\n@param ox Origin offset (x-axis).\n@param oy Origin offset (y-axis).\n@param kx Shear factor (x-axis).\n@param ky Shear factor (y-axis).
print love.keyboard.KeyConstant.print\nPrint key
printf love.graphics.printf(text,x,y,limit,[align],[r],[sx],[sy],[ox],[oy],[kx],[ky])\nDraws formatted text, with word wrap and alignment.\n\nSee additional notes in love.graphics.print.\n@param text A text string.\n@param x The position on the x-axis.\n@param y The position on the y-axis.\n@param limit Wrap the line after this many horizontal pixels.\n@param align The alignment.\n@param r Orientation (radians).\n@param sx Scale factor (x-axis).\n@param sy Scale factor (y-axis).\n@param ox Origin offset (x-axis).\n@param oy Origin offset (y-axis).\n@param kx Shear factor (x-axis).\n@param ky Shear factor (y-axis).
prismatic love.physics.JointType.prismatic\nA PrismaticJoint.
pulley love.physics.JointType.pulley\nA PulleyJoint.
pump love.event.pump()\nPump events into the event queue. This is a low-level function, and is\nusually not called by the user, but by love.run. Note that this does need\nto be called for any OS to think you're still running, and if you want\nto handle OS-generated events at all (think callbacks). love.event.pump\ncan only be called from the main thread, but afterwards, the rest of\nlove.event can be used from any other thread.
push Channel:push(value)\nSend a message to the thread Channel.\n\nThe value of the message can be a boolean, string, number, LÖVE userdata,\nor a simple flat table. Foreign userdata (Lua's files, LuaSocket, ENet,\n...), functions, and tables inside tables are not supported.\n@param value The contents of the message.
push love.event.push(e,[a],[b],[c],[d])\nAdds an event to the event queue.\n@param e The name of the event.\n@param a First event argument.\n@param b Second event argument.\n@param c Third event argument.\n@param d Fourth event argument.
push love.graphics.push()\nCopies and pushes the current coordinate transformation to the\ntransformation stack.\n\nThis function is always used to prepare for a corresponding pop\noperation later. It stores the current coordinate transformation state\ninto the transformation stack and keeps it active. Later changes to the\ntransformation can be undone by using the pop operation, which returns\nthe coordinate transform to the state it was in before calling push.
q love.keyboard.KeyConstant.q\nThe Q key
queryBoundingBox World:queryBoundingBox(topLeftX,topLeftY,bottomRightX,bottomRightY,callback)\nCalls a function for each fixture inside the specified area.\n@param topLeftX The x position of the top-left point.\n@param topLeftY The y position of the top-left point.\n@param bottomRightX The x position of the bottom-right point.\n@param bottomRightY The y position of the bottom-right point.\n@param callback This function gets passed one argument, the fixture,\nand should return a boolean. The search will continue if it is true or\nstop if it is false.
quit love.event.Event.quit\nQuit
quit love.event.quit()\nAdds the quit event to the queue.\n\nThe quit event is a signal for the event handler to close LÖVE. It's\npossible to abort the exit process with the love.quit callback.
quit love.quit()\nCallback function triggered when the game is closed.\n@return boolean Abort quitting. If true, do not close the game.
r love.filesystem.FileMode.r\nOpen a file for read.
r love.joystick.JoystickHat.r\nRight
r love.keyboard.KeyConstant.r\nThe R key
r love.mouse.MouseConstant.r\nRight mouse button.
ralt love.keyboard.KeyConstant.ralt\nRight alt key
random RandomGenerator:random()\nGenerates a pseudo random number in a platform independent way.\n@return number The pseudo random number.
random love.graphics.ParticleInsertMode.random\nParticles are inserted at random positions in the ParticleSystem's list\nof particles.
random love.math.random()\nGenerates a pseudo random number in a platform independent way.\n@return number The pseudo random number.
randomNormal RandomGenerator:randomNormal([stddev],[mean])\nGet a normally distributed pseudo random number.\n@param stddev Standard deviation of the distribution.\n@param mean The mean of the distribution.\n@return number Normally distributed random number with variance (stddev)²\nand the specified mean.
randomNormal love.math.randomNormal([stddev],[mean])\nGet a normally distributed pseudo random number.\n@param stddev Standard deviation of the distribution.\n@param mean The mean of the distribution.\n@return number Normally distributed random number with variance (stddev)²\nand the specified mean.
rayCast Fixture:rayCast(x1,y1,x2,y1,maxFraction,[childIndex])\nCasts a ray against the shape of the fixture and returns the surface\nnormal vector and the line position where the ray hit. If the ray missed\nthe shape, nil will be returned.\n\nThe ray starts on the first point of the input line and goes towards the\nsecond point of the line. The fourth argument is the maximum distance\nthe ray is going to travel as a scale factor of the input line length.\n\nThe childIndex parameter is used to specify which child of a parent\nshape, such as a ChainShape, will be ray casted. For ChainShapes, the\nindex of 1 is the first edge on the chain. Ray casting a parent shape\nwill only test the child specified so if you want to test every shape\nof the parent, you must loop through all of its children.\n\nThe world position of the impact can be calculated by multiplying\nthe line vector with the third return value and adding it to the line\nstarting point.\n\nhitx, hity = x1 + (x2 - x1) * fraction, y1 + (y2 - y1) * fraction\n@param x1 The x position of the ray starting point.\n@param y1 The y position of the ray starting point.\n@param x2 The x position of the ray end point.\n@param y1 The y position of the ray end point.\n@param maxFraction The maximum distance the ray is going to travel as\na number from 0 to 1.\n@param childIndex The index of the child the ray gets cast against.\n@return number The x position where the ray intersects with the shape.\n@return number The y position where the ray intersects with the shape.\n@return number The position on the input vector where the intersection\nhappened as a number from 0 to 1.
rayCast Shape:rayCast(x1,y1,x2,y2,maxFraction,tx,ty,tr,[childIndex])\nCasts a ray against the shape and returns the surface normal vector\nand the line position where the ray hit. If the ray missed the shape,\nnil will be returned. The Shape can be transformed to get it into the\ndesired position.\n\nThe ray starts on the first point of the input line and goes towards the\nsecond point of the line. The fourth argument is the maximum distance\nthe ray is going to travel as a scale factor of the input line length.\n\nThe childIndex parameter is used to specify which child of a parent\nshape, such as a ChainShape, will be ray casted. For ChainShapes, the\nindex of 1 is the first edge on the chain. Ray casting a parent shape\nwill only test the child specified so if you want to test every shape\nof the parent, you must loop through all of its children.\n\nThe world position of the impact can be calculated by multiplying\nthe line vector with the third return value and adding it to the line\nstarting point.\n\nhitx, hity = x1 + (x2 - x1) * fraction, y1 + (y2 - y1) * fraction\n@param x1 The x position of the input line starting point.\n@param y1 The y position of the input line starting point.\n@param x2 The x position of the input line end point.\n@param y2 The y position of the input line end point.\n@param maxFraction Ray length parameter.\n@param tx The translation of the shape on the x-axis.\n@param ty The translation of the shape on the y-axis.\n@param tr The shape rotation.\n@param childIndex The index of the child the ray gets cast against.\n@return number The x component of the normal vector of the edge where\nthe ray hit the shape.\n@return number The y component of the normal vector of the edge where\nthe ray hit the shape.\n@return number The position on the input line where the intersection\nhappened as a factor of the line length.
rayCast World:rayCast(x1,y1,x2,y2,callback)\nCasts a ray and calls a function with the fixtures that intersect it. You\ncannot make any assumptions about the order of the callbacks.\n\nEach time the function gets called, 6 arguments get passed to it. The\nfirst is the fixture intersecting the ray. The second and third are the\ncoordinates of the intersection point. The fourth and fifth is the surface\nnormal vector of the shape edge. The sixth argument is the position of\nthe intersection on the ray as a number from 0 to 1 (or even higher if\nthe ray length was changed with the return value).\n\nThe ray can be controlled with the return value. A positive value sets a\nnew ray length where 1 is the default value. A value of 0 terminates the\nray. If the callback function returns -1, the intersection gets ignored\nas if it didn't happen.\n\nThere is a bug in 0.8.0 where the normal vector passed to the callback\nfunction gets scaled by love.physics.getMeter.\n@param x1 The x position of the starting point of the ray.\n@param y1 The y position of the starting point of the ray.\n@param x2 The x position of the end point of the ray.\n@param y2 The y position of the end point of the ray.\n@param callback This function gets six arguments and should return\na number.
rctrl love.keyboard.KeyConstant.rctrl\nRight control key
rd love.joystick.JoystickHat.rd\nRight+Down
read File:read([bytes])\nRead a number of bytes from a file.\n@param bytes The number of bytes to read\n@return string The contents of the read bytes.\n@return number How many bytes have been read.
read love.filesystem.read(name,[bytes])\nRead the contents of a file.\n@param name The name (and path) of the file.\n@param bytes How many bytes to read.\n@return string The file contents.\n@return number How many bytes have been read.
rectangle love.graphics.rectangle(mode,x,y,width,height)\nDraws a rectangle.\n@param mode How to draw the rectangle.\n@param x The position of top-left corner along x-axis.\n@param y The position of top-left corner along y-axis.\n@param width Width of the rectangle.\n@param height Height of the rectangle.
refresh Image:refresh()\nReloads the Image's contents from the ImageData or CompressedData used\nto create the image.
remove love.filesystem.remove(name)\nRemoves a file or directory.\n@param name The file or directory to remove.\n@return boolean True if the file/directory was removed, false otherwise.
render BezierCurve:render([depth])\nGet a list of coordinates to be used with love.graphics.line.\n\nThis function samples the Bézier curve using recursive subdivision. You\ncan control the recursion depth using the depth parameter.\n\nIf you are just interested to know the position on the curve given a\nparameter, use BezierCurve:evalulate.\n@param depth Number of recursive subdivision steps.\n@return table List of x,y-coordinate pairs of points on the curve.
renderTo Canvas:renderTo(func)\nRender to the Canvas using a function.\n@param func A function performing drawing operations.
repeat love.graphics.WrapMode.repeat\nRepeat the image. Fills the whole available extent.
replace love.graphics.BlendMode.replace\nReplace blend mode.
reset ParticleSystem:reset()\nResets the particle emitter, removing any existing particles and resetting\nthe lifetime counter.
reset love.graphics.reset()\nResets the current graphics settings.\n\nCalling reset makes the current drawing color white, the current\nbackground color black, resets any active Canvas or Shader, and removes\nany scissor settings. It sets the BlendMode to alpha. It also sets both\nthe point and line drawing modes to smooth and their sizes to 1.0.
resetFriction Contact:resetFriction()\nResets the contact friction to the mixture value of both fixtures.
resetMassData Body:resetMassData()\nResets the mass of the body by recalculating it from the mass properties\nof the fixtures.
resetRestitution Contact:resetRestitution()\nResets the contact restitution to the mixture value of both fixtures.
resize love.event.Event.resize\nWindow size changed by the user
resize love.resize(w,h)\nCalled when the window is resized, for example if the user resizes the\nwindow, or if love.window.setMode is called with an unsupported width or\nheight in fullscreen and the window chooses the closest appropriate size.\n\nCalls to love.window.setMode will only trigger this event if the width\nor height of the window after the call doesn't match the requested width\nand height. This can happen if a fullscreen mode is requested which\ndoesn't match any supported mode, or if the fullscreen type is 'desktop'\nand the requested width or height don't match the desktop resolution.\n@param w The new width.\n@param h The new height.
resume Source:resume()\nResumes a paused Source.
resume love.audio.resume()\nResumes all audio
return love.keyboard.KeyConstant.return\nReturn key
revolute love.physics.JointType.revolute\nA RevoluteJoint.
rewind Source:rewind()\nRewinds a Source.
rewind love.audio.rewind()\nRewinds all playing audio.
rg11b10f love.graphics.CanvasFormat.rg11b10f\nFloating point RGB with 11 bits in the red and green channels, and 10\nbits in the blue channel (32 bpp.) There is no alpha channel. Color\nvalues can range from [0, +infinity].
rgb10a2 love.graphics.CanvasFormat.rgb10a2\nRGB with 10 bits per channel, and a 2-bit alpha channel (32 bpp.)
rgb565 love.graphics.CanvasFormat.rgb565\nRGB with 5, 6, and 5 bits each, respectively (16 bpp). There is no alpha\nchannel in this format.
rgb5a1 love.graphics.CanvasFormat.rgb5a1\nRGB with 5 bits each, and a 1-bit alpha channel (16 bpp.)
rgba16f love.graphics.CanvasFormat.rgba16f\nFloating point RGBA with 16 bits per channel (64 bpp.) Color values can\nrange from [-infinity, +infinity].
rgba32f love.graphics.CanvasFormat.rgba32f\nFloating point RGBA with 32 bits per channel (128 bpp.) Color values\ncan range from [-infinity, +infinity].
rgba4 love.graphics.CanvasFormat.rgba4\n4 bits per channel (16 bpp) RGBA.
rgba8 love.graphics.CanvasFormat.rgba8\n8 bits per channel (32 bpp) RGBA. Color channel values range from 0-255\n(0-1 in shaders.)
right love.graphics.AlignMode.right\nAlign text right.
right love.keyboard.KeyConstant.right\nRight cursor key
rightshoulder love.joystick.GamepadButton.rightshoulder\nRight bumper.
rightstick love.joystick.GamepadButton.rightstick\nRight stick click button.
rightx love.joystick.GamepadAxis.rightx\nThe x-axis of the right thumbstick.
righty love.joystick.GamepadAxis.righty\nThe y-axis of the right thumbstick.
rmeta love.keyboard.KeyConstant.rmeta\nRight meta key
rotate BezierCurve:rotate(angle,[ox],[oy])\nRotate the Bézier curve by an angle.\n@param angle Rotation angle in radians.\n@param ox X coordinate of the rotation center.\n@param oy Y coordinate of the rotation center.
rotate love.graphics.rotate(angle)\nRotates the coordinate system in two dimensions.\n\nCalling this function affects all future drawing operations by\nrotating the coordinate system around the origin by the given amount of\nradians. This change lasts until love.draw exits.\n@param angle The amount to rotate the coordinate system in radians.
rough love.graphics.LineStyle.rough\nDraw rough lines.
rough love.graphics.PointStyle.rough\nDraw rough points.
rshift love.keyboard.KeyConstant.rshift\nRight shift key
rsuper love.keyboard.KeyConstant.rsuper\nRight super key
ru love.joystick.JoystickHat.ru\nRight+Up
run love.run()\nThe main function, containing the main loop. A sensible default is used\nwhen left out.
s love.keyboard.KeyConstant.s\nThe S key
samples love.audio.TimeUnit.samples\nAudio samples.
saveGamepadMappings love.joystick.saveGamepadMappings(filename)\nSaves the virtual gamepad mappings of all Joysticks that are recognized\nas gamepads and have either been recently used or their gamepad bindings\nhave been modified.\n@param filename The filename to save the mappings string to.\n@return string The mappings string that was written to the file.
scale BezierCurve:scale(s,[ox],[oy])\nScale the Bézier curve by a factor.\n@param s Scale factor.\n@param ox X coordinate of the scaling center.\n@param oy Y coordinate of the scaling center.
scale love.graphics.scale(sx,[sy])\nScales the coordinate system in two dimensions.\n\nBy default the coordinate system in LÖVE corresponds to the display\npixels in horizontal and vertical directions one-to-one, and the x-axis\nincreases towards the right while the y-axis increases downwards. Scaling\nthe coordinate system changes this relation.\n\nAfter scaling by sx and sy, all coordinates are treated as if they were\nmultiplied by sx and sy. Every result of a drawing operation is also\ncorrespondingly scaled, so scaling by (2, 2) for example would mean\nmaking everything twice as large in both x- and y-directions. Scaling\nby a negative value flips the coordinate system in the corresponding\ndirection, which also means everything will be drawn flipped or upside\ndown, or both. Scaling by zero is not a useful operation.\n\nScale and translate are not commutative operations, therefore, calling\nthem in different orders will change the outcome.\n\nScaling lasts until love.draw exits.\n@param sx The scaling in the direction of the x-axis.\n@param sy The scaling in the direction of the y-axis. If omitted, it\ndefaults to same as parameter sx.
screen love.graphics.BlendMode.screen\nScreen blend mode.
scrollock love.keyboard.KeyConstant.scrollock\nScroll-lock key
seconds love.audio.TimeUnit.seconds\nRegular seconds.
seek File:seek(position)\nSeek to a position in a file.\n@param position The position to seek to.\n@return boolean Whether the operation was successful.
seek Source:seek(position,[unit])\nSets the playing position of the Source.\n@param position The position to seek to.\n@param unit The unit of the position value.
send Shader:send(name,number,...)\nSends one or more values to a special (extern) variable inside the shader.\n@param name Name of the number to send to the pixel effect.\n@param number Number to send to the pixel effect.\n@param ... Additional numbers to send in case the extern is an array.
set SpriteBatch:set(id,x,y,[r],[sx],[sy],[ox],[oy],[kx],[ky])\nChanges a sprite in the batch. This requires the identifier returned by\nadd and addq.\n@param id The identifier of the sprite that will be changed.\n@param x The position to draw the object (x-axis).\n@param y The position to draw the object (y-axis).\n@param r Orientation (radians).\n@param sx Scale factor (x-axis).\n@param sy Scale factor (y-axis).\n@param ox Origin offset (x-axis).\n@param oy Origin offset (y-axis).\n@param kx Shear factor (x-axis).\n@param ky Shear factor (y-axis).
setActive Body:setActive(active)\nSets whether the body is active in the world.\n\nAn inactive body does not take part in the simulation. It will not move\nor cause any collisions.\n@param active If the body is active or not.
setAngle Body:setAngle(angle)\nSet the angle of the body.\n\nThe angle is measured in radians. If you need to transform it from\ndegrees, use math.rad.\n\nA value of 0 radians will mean "looking to the right". .Although radians\nincrease counter-clockwise, the y-axis points down so it becomes clockwise\nfrom our point of view.\n\nIt is possible to cause a collision with another body by changing\nits angle.\n@param angle The angle in radians.
setAngularDamping Body:setAngularDamping(damping)\nSets the angular damping of a Body.\n\nSee Body:getAngularDamping for a definition of angular damping.\n\nAngular damping can take any value from 0 to infinity. It is recommended\nto stay between 0 and 0.1, though. Other values will look unrealistic.\n@param damping The new angular damping.
setAngularVelocity Body:setAngularVelocity(w)\nSets the angular velocity of a Body.\n\nThe angular velocity is the rate of change of angle over time.\n\nThis function will not accumulate anything; any impulses previously\napplied since the last call to World:update will be lost.\n@param w The new angular velocity, in radians per second
setAreaSpread ParticleSystem:setAreaSpread(distribution,dx,dy)\nSets area-based spawn parameters for the particles. Newly created\nparticles will spawn in an area around the emitter based on the parameters\nto this function.\n@param distribution The type of distribution for new particles.\n@param dx The maximum spawn distance from the emitter along the x-axis\nfor uniform distribution, or the standard deviation along the x-axis\nfor normal distribution.\n@param dy The maximum spawn distance from the emitter along the y-axis\nfor uniform distribution, or the standard deviation along the y-axis\nfor normal distribution.
setAttenuationDistances Source:setAttenuationDistances(ref,max)\nSets the reference and maximum distance of the source.\n@param ref The new reference distance.\n@param max The new maximum distance.
setAwake Body:setAwake(awake)\nWakes the body up or puts it to sleep.\n@param awake The body sleep status.
setBackgroundColor love.graphics.setBackgroundColor(r,g,b,[a])\nSets the background color.\n@param r The red component (0-255).\n@param g The green component (0-255).\n@param b The blue component (0-255).\n@param a The alpha component (0-255).
setBlendMode love.graphics.setBlendMode(mode)\nSets the blending mode.\n@param mode The blend mode to use.
setBuffer File:setBuffer(mode,size)\nSets the buffer mode for a file opened for writing or appending. Files\nwith buffering enabled will not write data to the disk until the buffer\nsize limit is reached, depending on the buffer mode.\n@param mode The buffer mode to use.\n@param size The maximum size in bytes of the file's buffer.\n@return boolean Whether the buffer mode was successfully set.\n@return string The error string, if the buffer mode could not be set\nand an error occurred.
setBufferSize ParticleSystem:setBufferSize(buffer)\nSets the size of the buffer (the max allowed amount of particles in\nthe system).\n@param buffer The buffer size.
setBufferSize SpriteBatch:setBufferSize(size)\nSets the maximum number of sprites the SpriteBatch can hold. Existing\nsprites in the batch (up to the new maximum) will not be cleared when\nthis function is called.\n@param size The new maximum number of sprites the batch can hold.
setBullet Body:setBullet(status)\nSet the bullet status of a body.\n\nThere are two methods to check for body collisions:\n\nat their location when the world is updated (default) using continuous\ncollision detection (CCD)\n\nThe default method is efficient, but a body moving very quickly may\nsometimes jump over another body without producing a collision. A body\nthat is set as a bullet will use CCD. This is less efficient, but is\nguaranteed not to jump when moving quickly.\n\nNote that static bodies (with zero mass) always use CCD, so your walls\nwill not let a fast moving body pass through even if it is not a bullet.\n@param status The bullet status of the body.
setCallbacks World:setCallbacks(beginContact,endContact,preSolve,postSolve)\nSets functions for the collision callbacks during the world update.\n\nFour Lua functions can be given as arguments. The value nil removes\na function.\n\nWhen called, each function will be passed three arguments. The first\ntwo arguments are the colliding fixtures and the third argument is the\nContact between them. The PostSolve callback additionally gets the normal\nand tangent impulse for each contact point.\n@param beginContact Gets called when two fixtures begin to overlap.\n@param endContact Gets called when two fixtures cease to overlap.\n@param preSolve Gets called before a collision gets resolved.\n@param postSolve Gets called after the collision has been resolved.
setCanvas love.graphics.setCanvas()\nSets the render target to one or more Canvases. All drawing operations\nuntil the next love.graphics.setCanvas call will be redirected to the\nspecified canvases and not shown on the screen.\n\nAll canvas arguments must have the same widths and heights and the same\ntexture type. Normally the same thing will be drawn on each canvas,\nbut that can be changed if a pixel shader is used with the "effects"\nfunction instead of the regular effect.\n\nNot all computers support Canvases, and not all computers which\nsupport Canvases will support multiple render targets. Use\nlove.graphics.isSupported to check.\n\nnWhen called without arguments, the render target is reset to the screen.
setCategory Fixture:setCategory(category1,category2,...)\nSets the categories the fixture belongs to. There can be up to 16\ncategories represented as a number from 1 to 16.\n@param category1 The first category.\n@param category2 The second category.\n@param ... Additional categories.
setClipboardText love.system.setClipboardText(text)\nPuts text in the clipboard.\n@param text The new text to hold in the system's clipboard.
setCollideConnected Joint:setCollideConnected(collide)\nSets whether the connected Bodies should collide with eachother.\n@param collide True for the Bodies to collide, false otherwise.
setColor SpriteBatch:setColor()\nSets the color that will be used for the next add and set\noperations. Calling the function without arguments will clear the color.\n\nThe global color set with love.graphics.setColor will not work on the\nSpriteBatch if any of the sprites has its own color.
setColor love.graphics.setColor(red,green,blue,alpha)\nSets the color used for drawing.\n@param red The amount of red.\n@param green The amount of green.\n@param blue The amount of blue.\n@param alpha The amount of alpha. The alpha value will be applied to\nall subsequent draw operations, even the drawing of an image.
setColorMask love.graphics.setColorMask()\nSets the color mask. Enables or disables specific color components when\nrendering and clearing the screen. For example, if red is set to false,\nno further changes will be made to the red component of any pixels.\n\nEnables all color components when called without arguments.
setColors ParticleSystem:setColors(r1,g1,b1,a1,r2,g2,b2,a2,...)\nSets a series of colors to apply to the particle sprite. The particle\nsystem will interpolate between each color evenly over the particle's\nlifetime. Color modulation needs to be activated for this function to\nhave any effect.\n\nArguments are passed in groups of four, representing the components of\nthe desired RGBA value. At least one color must be specified. A maximum\nof eight may be used.\n@param r1 First color, red component (0-255).\n@param g1 First color, green component (0-255).\n@param b1 First color, blue component (0-255).\n@param a1 First color, alpha component (0-255).\n@param r2 Second color, red component (0-255).\n@param g2 Second color, green component (0-255).\n@param b2 Second color, blue component (0-255).\n@param a2 Second color, alpha component (0-255).\n@param ... Etc.
setCone Source:setCone(innerAngle,outerAngle,[outerVolume])\nSets the Source's directional volume cones. Together with\nSource:setDirection, the cone angles allow for the Source's volume to\nvary depending on its direction.\n@param innerAngle The inner angle from the Source's direction, in\nradians. The Source will play at normal volume if the listener is inside\nthe cone defined by this angle.\n@param outerAngle The outer angle from the Source's direction, in\nradians. The Source will play at a volume between the normal and outer\nvolumes, if the listener is in between the cones defined by the inner\nand outer angles.\n@param outerVolume The Source's volume when the listener is outside both\nthe inner and outer cone angles.
setConstant PulleyJoint:setConstant(length)\nSet the total length of the rope.\n\nSetting a new length for the rope updates the maximum length values of\nthe joint.\n@param length The new length of the rope in the joint.
setControlPoint BezierCurve:setControlPoint(i,ox,oy)\nSet coordinates of the i-th control point. Indices start with 1.\n@param i Index of the control point.\n@param ox Position of the control point along the x axis.\n@param oy Position of the control point along the y axis.
setCursor love.mouse.setCursor()\nSets the current mouse cursor.\n\nResets the current mouse cursor to the default when called without\narguments.
setDampingRatio DistanceJoint:setDampingRatio(ratio)\nSets the damping ratio.\n@param ratio The damping ratio.
setDampingRatio MouseJoint:setDampingRatio(ratio)\nSets a new damping ratio.\n@param ratio The new damping ratio.
setDampingRatio WeldJoint:setDampingRatio(ratio)\nThe new damping ratio.\n@param ratio The new damping ratio.
setData Shape:setData(v)\nSet data to be passed to the collision callback.\n\nWhen a shape collides, the value set here will be passed to the collision\ncallback as one of the parameters. Typically, you would want to store\na table reference here, but any value can be used.\n@param v Any Lua value.
setDefaultFilter love.graphics.setDefaultFilter(min,[mag],[anisotropy])\nSets the default scaling filters used with Images, Canvases, and Fonts.\n\nThis function does not apply retroactively to loaded images.\n@param min Filter mode used when scaling the image down.\n@param mag Filter mode used when scaling the image up.\n@param anisotropy Maximum amount of Anisotropic Filtering used.
setDensity Fixture:setDensity(density)\nSets the density of the fixture. Call Body:resetMassData if this needs\nto take effect immediately.\n@param density The fixture density in kilograms per square meter.
setDensity Shape:setDensity(density)\nSets the density of a Shape. Do this before calling\nBody:setMassFromShapes.\n@param density The new density of the Shape.
setDirection ParticleSystem:setDirection(direction)\nSets the direction the particles will be emitted in.\n@param direction The direction of the particles (in radians).
setDirection Source:setDirection(x,y,z)\nSets the direction vector of the Source. A zero vector makes the source\nnon-directional.\n@param x The X part of the direction vector.\n@param y The Y part of the direction vector.\n@param z The Z part of the direction vector.
setDistanceModel love.audio.setDistanceModel(model)\nSets the distance attenuation model.\n@param model The new distance model.
setDopplerScale love.audio.setDopplerScale(scale)\nSets a global scale factor for velocity-based doppler effects. The\ndefault scale value is 1.\n@param scale The new doppler scale factor. The scale must be greater\nthan 0.
setDrawMode Mesh:setDrawMode(mode)\nSets the mode used when drawing the Mesh.\n@param mode The mode to use when drawing the Mesh.
setDrawRange Mesh:setDrawRange(min,max)\nRestricts the drawn vertices of the Mesh to a subset of the total.\n\nIf a vertex map is used with the Mesh, this method will set a subset of\nthe values in the vertex map array to use, instead of a subset of the\ntotal vertices in the Mesh.\n\nFor example, if Mesh:setVertexMap(1, 2, 3, 1, 3, 4) and\nMesh:setDrawRange(4, 6) are called, vertices 1, 3, and 4 will be drawn.\n@param min The index of the first vertex to use when drawing, or the index\nof the first value in the vertex map to use if one is set for this Mesh.\n@param max The index of the last vertex to use when drawing, or the index\nof the last value in the vertex map to use if one is set for this Mesh.
setEmissionRate ParticleSystem:setEmissionRate(rate)\nSets the amount of particles emitted per second.\n@param rate The amount of particles per second.
setEmitterLifetime ParticleSystem:setEmitterLifetime(life)\nSets how long the particle system should emit particles (if -1 then it\nemits particles forever).\n@param life The lifetime of the emitter (in seconds).
setEnabled Contact:setEnabled(enabled)\nEnables or disables the contact.\n@param enabled True to enable or false to disable.
setFilter Canvas:setFilter(min,[mag],[anisotropy])\nSets the filter of the Canvas.\n@param min How to scale a canvas down.\n@param mag How to scale a canvas up.\n@param anisotropy Maximum amount of anisotropic filtering used.
setFilter Font:setFilter(min,[mag],[anisotropy])\nSets the filter mode for a font.\n@param min How to scale a font down.\n@param mag How to scale a font up.\n@param anisotropy Maximum amount of anisotropic filtering used.
setFilter Image:setFilter(min,[mag])\nSets the filter mode for an image.\n@param min How to scale an image down.\n@param mag How to scale an image up.
setFilterData Fixture:setFilterData(categories,mask,group)\nSets the filter data of the fixture.\n\nGroups, categories, and mask can be used to define the collision behaviour\nof the fixture.\n\nIf two fixtures are in the same group they either always collide if the\ngroup is positive, or never collide if it's negative. Is the group zero\nor they do not match, then the contact filter checks if the fixtures\nselect a category of the other fixture with their masks. The fixtures\ndo not collide if that's not the case. If they do have each others\ncategories selected, the return value of the custom contact filter will\nbe used. They always collide if none was set.\n\nThere can be up to 16 categories. Categories and masks are encoded as\nthe bits of a 16-bit integer.\n@param categories The categories as an integer from 0 to 65535.\n@param mask The mask as an integer from 0 to 65535.\n@param group The group as an integer from -32768 to 32767.
setFilterData Shape:setFilterData(categoryBits,maskBits,groupIndex)\nSets the filter data for a Shape.\n\nCollision filtering is a system for preventing collision between\nshapes. For example, say you make a character that rides a bicycle. You\nwant the bicycle to collide with the terrain and the character to collide\nwith the terrain, but you don't want the character to collide with\nthe bicycle (because they must overlap). Box2D supports such collision\nfiltering using categories and groups.\n@param categoryBits A 16-bit integer representing category membership.\n@param maskBits A 16-bit integer representing masked categories.\n@param groupIndex An integer representing the group index.
setFixedRotation Body:setFixedRotation(fixed)\nSet whether a body has fixed rotation.\n\nBodies with fixed rotation don't vary the speed at which they rotate.\n@param fixed Whether the body should have fixed rotation.
setFont love.graphics.setFont(font)\nSet an already-loaded Font as the current font or create and load a new\none from the file and size.\n\nIt's recommended that Font objects are created with love.graphics.newFont\nin the loading stage and then passed to this function in the drawing\nstage.\n@param font The Font object to use.
setFrequency DistanceJoint:setFrequency(Hz)\nSets the response speed.\n@param Hz The response speed.
setFrequency MouseJoint:setFrequency(freq)\nSets a new frequency.\n@param freq The new frequency in hertz.
setFrequency WeldJoint:setFrequency(freq)\nSets a new frequency.\n@param freq The new frequency in hertz.
setFriction Contact:setFriction(friction)\nSets the contact friction.\n@param friction The contact friction.
setFriction Fixture:setFriction(friction)\nSets the friction of the fixture.\n@param friction The fixture friction.
setFriction Shape:setFriction(friction)\nSets the friction of the shape. Friction determines how shapes react\nwhen they "slide" along other shapes. Low friction indicates a slippery\nsurface, like ice, while high friction indicates a rough surface, like\nconcrete. Range: 0.0 - 1.0.\n@param friction The friction of the shape.
setFullscreen love.window.setFullscreen(fullscreen)\nEnters or exits fullscreen. The display to use when entering fullscreen\nis chosen based on which display the window is currently in, if multiple\nmonitors are connected.\n\nIf fullscreen mode is entered and the window size doesn't match one of\nthe monitor's display modes (in normal fullscreen mode) or the window\nsize doesn't match the desktop size (in 'desktop' fullscreen mode), the\nwindow will be resized appropriately. The window will revert back to its\noriginal size again when fullscreen mode is exited using this function.\n@param fullscreen Whether to enter or exit fullscreen mode.\n@return boolean True if successful, false otherwise.
setGamepadMapping love.joystick.setGamepadMapping(guid,button,inputtype,inputindex,hatdirection)\nBinds a virtual gamepad input to a button, axis or hat for all Joysticks\nof a certain type. For example, if this function is used with a GUID\nreturned by a Dualshock 3 controller in OS X, the binding will affect\nJoystick:getGamepadAxis and Joystick:isGamepadDown for all Dualshock 3\ncontrollers used with the game when run in OS X.\n\nLÖVE includes built-in gamepad bindings for many common controllers. This\nfunction lets you change the bindings or add new ones for types of\nJoysticks which aren't recognized as gamepads by default.\n\nThe virtual gamepad buttons and axes are designed around the Xbox 360\ncontroller layout.\n@param guid The OS-dependent GUID for the type of Joystick the binding\nwill affect.\n@param button The virtual gamepad button to bind.\n@param inputtype The type of input to bind the virtual gamepad button to.\n@param inputindex The index of the axis, button, or hat to bind the\nvirtual gamepad button to.\n@param hatdirection The direction of the hat, if the virtual gamepad\nbutton will be bound to a hat. nil otherwise.\n@return boolean Whether the virtual gamepad button was successfully bound.
setGrabbed love.mouse.setGrabbed(grab)\nGrabs the mouse and confines it to the window.\n@param grab True to confine the mouse, false to let it leave the window.
setGravity World:setGravity(x,y)\nSet the gravity of the world.\n@param x The x component of gravity.\n@param y The y component of gravity.
setGravityScale Body:setGravityScale(scale)\nSets a new gravity scale factor for the body.\n@param scale The new gravity scale factor.
setGroupIndex Fixture:setGroupIndex(group)\nSets the group the fixture belongs to. Fixtures with the same group\nwill always collide if the group is positive or never collide if it's\nnegative. The group zero means no group.\n\nThe groups range from -32768 to 32767.\n@param group The group as an integer from -32768 to 32767.
setIcon love.window.setIcon(imagedata)\nSets the window icon until the game is quit. Not all operating systems\nsupport very large icon images.\n@param imagedata The window icon image.\n@return boolean Whether the icon has been set successfully.
setIdentity love.filesystem.setIdentity(name,[searchorder])\nSets the write directory for your game. Note that you can only set the\nname of the folder to store your files in, not the location.\n@param name The new identity that will be used as write directory.\n@param searchorder Whether love.filesystem will look for files in the\nwrite directory before or after looking in the main game source.
setInertia Body:setInertia(inertia)\nSet the inertia of a body.\n\nThis value can also be set by the fourth argument of Body:setMass.\n@param inertia The new moment of inertia, in kilograms per meter squared.
setInsertMode ParticleSystem:setInsertMode(mode)\nSets the mode to use when the ParticleSystem adds new particles.\n@param mode The mode to use when the ParticleSystem adds new particles.
setInvertedStencil love.graphics.setInvertedStencil()\nDefines an inverted stencil for the drawing operations or releases the\nactive one.\n\nIt's the same as love.graphics.setStencil with the mask inverted.\n\nCalling the function without arguments releases the active stencil.
setKeyRepeat love.keyboard.setKeyRepeat(enable)\nEnables or disables key repeat. It is disabled by default.\n\nThe interval between repeats depends on the user's system settings.\n@param enable Whether repeat keypress events should be enabled when a\nkey is held down.
setLength DistanceJoint:setLength(l)\nSets the equilibrium distance between the two Bodies.\n@param l The length between the two Bodies.
setLimits PrismaticJoint:setLimits(lower,upper)\nSets the limits.\n@param lower The lower limit, usually in meters.\n@param upper The upper limit, usually in meters.
setLimits RevoluteJoint:setLimits(lower,upper)\nSets the limits.\n@param lower The lower limit, in radians.\n@param upper The upper limit, in radians.
setLimitsEnabled PrismaticJoint:setLimitsEnabled(enable)\nEnables or disables the limits of the joint.\n@param enable True to enable, false to disable.
setLimitsEnabled RevoluteJoint:setLimitsEnabled(enable)\nEnables or disables the joint limits.\n@param enable True to enable, false to disable.
setLineHeight Font:setLineHeight(height)\nSets the line height. When rendering the font in lines the actual height\nwill be determined by the line height multiplied by the height of the\nfont. The default is 1.0.\n@param height The new line height.
setLineJoin love.graphics.setLineJoin(join)\nSets the line join style.\n@param join The LineJoin to use.
setLineStyle love.graphics.setLineStyle(style)\nSets the line style.\n@param style The LineStyle to use.
setLineWidth love.graphics.setLineWidth(width)\nSets the line width.\n@param width The width of the line.
setLinearAcceleration ParticleSystem:setLinearAcceleration(xmin,[ymin],[xmax],[ymax])\nSets the linear acceleration (acceleration along the x and y axes)\nfor particles.\n\nEvery particle created will accelerate along the x and y axes between\nxmin,ymin and xmax,ymax.\n@param xmin The minimum acceleration along the x axis.\n@param ymin The minimum acceleration along the y axis.\n@param xmax The maximum acceleration along the x axis.\n@param ymax The maximum acceleration along the y axis.
setLinearDamping Body:setLinearDamping(ld)\nSets the linear damping of a Body\n\nSee Body:getLinearDamping for a definition of linear damping.\n\nLinear damping can take any value from 0 to infinity. It is recommended\nto stay between 0 and 0.1, though. Other values will make the objects look\n"floaty".\n@param ld The new linear damping.
setLinearDamping ParticleSystem:setLinearDamping(min,max)\nSets the amount of linear damping (constant deceleration) for particles.\n@param min The minimum amount of linear damping applied to particles.\n@param max The maximum amount of linear damping applied to particles.
setLinearVelocity Body:setLinearVelocity(x,y)\nSets a new linear velocity for the Body.\n\nThis function will not accumulate anything; any impulses previously\napplied since the last call to World:update will be lost.\n@param x The x component of the velocity vector.\n@param y The y component of the velocity vector.
setLooping Source:setLooping(loop)\nSets whether the Source should loop.\n@param loop True if the source should loop, false otherwise.
setLowerLimit PrismaticJoint:setLowerLimit(lower)\nSets the lower limit.\n@param lower The lower limit, usually in meters.
setLowerLimit RevoluteJoint:setLowerLimit(lower)\nSets the lower limit.\n@param lower The lower limit, in radians.
setMask Fixture:setMask(mask1,mask2,...)\nSets the category mask of the fixture. There can be up to 16 categories\nrepresented as a number from 1 to 16.\n\nThis fixture will collide with the fixtures that are in the selected\ncategories if the other fixture also has a category of this fixture\nselected.\n@param mask1 The first category.\n@param mask2 The second category.\n@param ... Additional categories.
setMass Body:setMass(mass)\nSets the mass in kilograms.\n@param mass The mass, in kilograms.
setMassData Body:setMassData(x,y,mass,inertia)\nOverrides the calculated mass data.\n@param x The x component of the center of mass in local coordinates.\n@param y The y component of the center of mass in local coordinates.\n@param mass The mass, in kilograms.\n@param inertia The rotational inertia, in kilograms per squared meter.
setMassFromShapes Body:setMassFromShapes()\nSets mass properties from attatched shapes.\n\nIf you feel that finding the correct mass properties is tricky, then\nthis function may be able to help you. After creating the needed shapes\non the Body, a call to this function will set the mass properties based\non those shapes. Remember to call this function after adding the shapes.\n\nSetting the mass properties this way always results in a realistic\n(or at least good-looking) simulation, so using it is highly recommended.
setMaxForce FrictionJoint:setMaxForce(maxForce)\nSets the maximum friction force in Newtons.\n@param maxForce Max force in Newtons.
setMaxForce MouseJoint:setMaxForce(f)\nSets the highest allowed force.\n@param f The max allowed force.
setMaxLengths PulleyJoint:setMaxLengths(max1,max2)\nSet the maximum lengths of the rope segments.\n\nThe physics module also imposes maximum values for the rope segments. If\nthe parameters exceed these values, the maximum values are set instead\nof the requested values.\n@param max1 The new maximum length of the first segment.\n@param max2 The new maximum length of the second segment.
setMaxMotorForce PrismaticJoint:setMaxMotorForce(f)\nSet the maximum motor force.\n@param f The maximum motor force, usually in N.
setMaxMotorTorque RevoluteJoint:setMaxMotorTorque(f)\nSet the maximum motor force.\n@param f The maximum motor force, in Nm.
setMaxTorque FrictionJoint:setMaxTorque(torque)\nSets the maximum friction torque in Newton-meters.\n@param torque Maximum torque in Newton-meters.
setMeter love.physics.setMeter(scale)\nSets the pixels to meter scale factor.\n\nAll coordinates in the physics module are divided by this number and\nconverted to meters, and it creates a convenient way to draw the objects\ndirectly to the screen without the need for graphics transformations.\n\nIt is recommended to create shapes no larger than 10 times the scale. This\nis important because Box2D is tuned to work well with shape sizes from\n0.1 to 10 meters.\n\nlove.physics.setMeter does not apply retroactively to created\nobjects. Created objects retain their meter coordinates but the scale\nfactor will affect their pixel coordinates.\n@param scale The scale factor as an integer.
setMipmapFilter Image:setMipmapFilter()\nSets the mipmap filter mode for an Image.\n\nMipmapping is useful when drawing an image at a reduced scale. It can\nimprove performance and reduce aliasing issues.\n\nAutomatically creates mipmaps for the Image if none exist yet. If the\nimage is compressed and its CompressedData has mipmap data included,\nit will use that.\n\nDisables mipmap filtering when called without arguments.
setMode love.window.setMode([width],[height],flags)\nChanges the display mode.\n\nIf width or height is 0, the width or height of the desktop will be used.\n@param width Display width.\n@param height Display height.\n@param flags The flags table.\n@return boolean True if successful, false otherwise.
setMotorEnabled PrismaticJoint:setMotorEnabled(enable)\nStarts or stops the joint motor.\n@param enable True to enable, false to disable.
setMotorEnabled RevoluteJoint:setMotorEnabled(enable)\nStarts or stops the joint motor.\n@param enable True to enable, false to disable.
setMotorSpeed PrismaticJoint:setMotorSpeed(s)\nSets the motor speed.\n@param s The motor speed, usually in meters per second.
setMotorSpeed RevoluteJoint:setMotorSpeed(s)\nSets the motor speed.\n@param s The motor speed, radians per second.
setNewFont love.graphics.setNewFont([size])\nCreates and sets a new font.\n@param size The size of the font.\n@return Font The new font.
setNextVertex ChainShape:setNextVertex(x,y)\nSets a vertex that establishes a connection to the next shape.\n\nThis can help prevent unwanted collisions when a flat shape slides along\nthe edge and moves over to the new shape.\n@param x The x component of the vertex.\n@param y The y component of the vertex.
setOffset ParticleSystem:setOffset(x,y)\nSet the offset position which the particle sprite is rotated around. If\nthis function is not used, the particles rotate around their center.\n@param x The x coordinate of the rotation offset.\n@param y The y coordinate of the rotation offset.
setOrientation love.audio.setOrientation(fx,fy,fz,ux,uy,uz)\nSets the orientation of the listener.\n@param fx The X component of the forward vector of the listener\norientation.\n@param fy The Y component of the forward vector of the listener\norientation.\n@param fz The Z component of the forward vector of the listener\norientation.\n@param ux The X component of the up vector of the listener orientation.\n@param uy The Y component of the up vector of the listener orientation.\n@param uz The Z component of the up vector of the listener orientation.
setParticleLifetime ParticleSystem:setParticleLifetime(min,[max])\nSets the life of the particles.\n@param min The minimum life of the particles (seconds).\n@param max The maximum life of the particles (seconds).
setPitch Source:setPitch(pitch)\nSets the pitch of the Source.\n@param pitch Calculated with regard to 1 being the base pitch. Each\nreduction by 50 percent equals a pitch shift of -12 semitones (one\noctave reduction). Each doubling equals a pitch shift of 12 semitones\n(one octave increase). Zero is not a legal value.
setPixel ImageData:setPixel(x,y,r,g,b,a)\nSets the color of a pixel.\n\nValid x and y values start at 0 and go up to image width and height\nminus 1.\n@param x The position of the pixel on the x-axis.\n@param y The position of the pixel on the y-axis.\n@param r The red component (0-255).\n@param g The green component (0-255).\n@param b The blue component (0-255).\n@param a The alpha component (0-255).
setPoint CircleShape:setPoint(x,y)\nSets the location of the center of the circle shape.\n@param x The x-component of the new center point of the circle.\n@param y The y-component of the new center point of the circle.
setPointSize love.graphics.setPointSize(size)\nSets the point size.\n@param size The new point size.
setPointStyle love.graphics.setPointStyle(style)\nSets the point style.\n@param style The new point style.
setPosition Body:setPosition(x,y)\nSet the position of the body.\n\nNote that this may not be the center of mass of the body.\n@param x The x position.\n@param y The y position.
setPosition ParticleSystem:setPosition(x,y)\nSets the position of the emitter.\n@param x Position along x-axis.\n@param y Position along y-axis.
setPosition Source:setPosition(x,y,z)\nSets the position of the Source.\n@param x The X position of the Source.\n@param y The Y position of the Source.\n@param z The Z position of the Source.
setPosition love.audio.setPosition(x,y,z)\nSets the position of the listener, which determines how sounds play.\n@param x The X position of the listener.\n@param y The Y position of the listener.\n@param z The Z position of the listener.
setPosition love.mouse.setPosition(x,y)\nSets the position of the mouse.\n@param x The new position of the mouse along the x-axis.\n@param y The new position of the mouse along the y-axis.
setPosition love.window.setPosition(x,y,display)\nSets the position of the window on the screen.\n\nThe window position is in the coordinate space of the specified display.\n@param x The x-coordinate of the window's position.\n@param y The y-coordinate of the window's position.\n@param display The index of the display that the new window position is\nrelative to.
setPreviousVertex ChainShape:setPreviousVertex(x,y)\nSets a vertex that establishes a connection to the previous shape.\n\nThis can help prevent unwanted collisions when a flat shape slides along\nthe edge and moves over to the new shape.\n@param x The x component of the vertex.\n@param y The y component of the vertex.
setQuads ParticleSystem:setQuads(quad1,quad2)\nSets a series of Quads to use for the particle sprites. Particles will\nchoose a Quad from the list based on the particle's current lifetime,\nallowing for the use of animated sprite sheets with ParticleSystems.\n@param quad1 The first Quad to use.\n@param quad2 The second Quad to use.
setRadialAcceleration ParticleSystem:setRadialAcceleration(min,[max])\nSet the radial acceleration (away from the emitter).\n@param min The minimum acceleration.\n@param max The maximum acceleration.
setRadius CircleShape:setRadius(radius)\nSets the radius of the circle.\n@param radius The radius of the circle.
setRandomSeed love.math.setRandomSeed(seed)\nSets the seed of the random number generator using the specified integer\nnumber.\n@param seed The integer number with which you want to seed the\nrandomization. Must be within the range of [1, 2^53].
setRandomState love.math.setRandomState(state)\nGets the current state of the random number generator. This returns an\nopaque implementation-dependent string which is only useful for later\nuse with RandomGenerator:setState.\n\nThis is different from RandomGenerator:getSeed in that getState gets\nthe RandomGenerator's current state, whereas getSeed gets the previously\nset seed number.\n\nThe value of the state string does not depend on the current operating\nsystem.\n@param state The current state of the RandomGenerator object, represented\nas a string.
setRatio GearJoint:setRatio(ratio)\nSet the ratio of a gear joint.\n@param ratio The new ratio of the joint.
setRatio PulleyJoint:setRatio(ratio)\nSet the pulley ratio.\n@param ratio The new pulley ratio of the joint.
setRelativeMode love.mouse.setRelativeMode(enable)\nSets whether relative mode is enabled for the mouse.\n\nWhen relative mode is enabled, the cursor is hidden and doesn't move when\nthe mouse does, but relative mouse motion events are still generated via\nlove.mousemoved. This lets the mouse move in any direction indefinitely\nwithout the cursor getting stuck at the edges of the screen.\n\nThe reported position of the mouse is not updated while relative mode\nis enabled, even when relative mouse motion events are generated.\n@param enable True to enable relative mode, false to disable it.
setRelativeRotation ParticleSystem:setRelativeRotation(enable)\nSets whether particle angles and rotations are relative to their\nvelocities. If enabled, particles are aligned to the angle of their\nvelocities and rotate relative to that angle.\n@param enable True to enable relative particle rotation, false to\ndisable it.
setRestitution Contact:setRestitution(restitution)\nSets the contact restitution.\n@param restitution The contact restitution.
setRestitution Fixture:setRestitution(restitution)\nSets the restitution of the fixture.\n@param restitution The fixture restitution.
setRolloff Source:setRolloff(rolloff)\nSets the rolloff factor.\n@param rolloff The new rolloff factor.
setRotation ParticleSystem:setRotation(min,[max])\nSets the rotation of the image upon particle creation (in radians).\n@param min The minimum initial angle (radians).\n@param max The maximum initial angle (radians).
setSample SoundData:setSample(i,sample)\nSets the sample at the specified position.\n@param i The position of the sample (0 means first sample).\n@param sample A normalized sample (range -1.0 to 1.0).
setScissor love.graphics.setScissor()\nSets or disables scissor.\n\nThe scissor limits the drawing area to a specified rectangle. This\naffects all graphics calls, including love.graphics.clear.
setSeed RandomGenerator:setSeed(seed)\nSets the seed of the random number generator using the specified integer\nnumber.\n@param seed The integer number with which you want to seed the\nrandomization. Must be within the range of [1, 2^53].
setSensor Fixture:setSensor(sensor)\nSets whether the fixture should act as a sensor.\n\nSensor do not produce collisions responses, but the begin and end\ncallbacks will still be called for this fixture.\n@param sensor The sensor status.
setShader love.graphics.setShader()\nSets or resets a Shader as the current pixel effect or vertex shaders. All\ndrawing operations until the next love.graphics.setShader will be drawn\nusing the Shader object specified.\n\nDisables the shaders when called without arguments.
setSizeVariation ParticleSystem:setSizeVariation(variation)\nSets the degree of variation (0 meaning no variation and 1 meaning full\nvariation between start and end).\n@param variation The degree of variation (0 meaning no variation and 1\nmeaning full variation between start and end).
setSizes ParticleSystem:setSizes(size1,size2,...)\nSets a series of sizes by which to scale a particle sprite. 1.0 is normal\nsize. The particle system will interpolate between each size evenly over\nthe particle's lifetime.\n\nAt least one size must be specified. A maximum of eight may be used.\n@param size1 The first size.\n@param size2 The second size.\n@param ... Etc.
setSleepingAllowed Body:setSleepingAllowed(allowed)\nSets the sleeping behaviour of the body.\n@param allowed True if the body is allowed to sleep or false if not.
setSleepingAllowed World:setSleepingAllowed(allowSleep)\nSet the sleep behaviour of the world.\n\nA sleeping body is much more efficient to simulate than when awake.\n\nIf sleeping is allowed, any body that has come to rest will sleep.\n@param allowSleep True if the bodies are allowed to sleep or false if not.
setSource love.filesystem.setSource(path)\nSets the source of the game, where the code is present. This function\ncan only be called once, and is normally automatically done by LÖVE.\n@param path Absolute path to the game's source folder.
setSpeed ParticleSystem:setSpeed(min,[max])\nSets the speed of the particles.\n@param min The minimum linear speed of the particles.\n@param max The maximum linear speed of the particles.
setSpin ParticleSystem:setSpin(min,[max])\nSets the spin of the sprite.\n@param min The minimum spin (radians per second).\n@param max The maximum spin (radians per second).
setSpinVariation ParticleSystem:setSpinVariation(variation)\nSets the degree of variation (0 meaning no variation and 1 meaning full\nvariation between start and end).\n@param variation The degree of variation (0 meaning no variation and 1\nmeaning full variation between start and end).
setSpread ParticleSystem:setSpread(spread)\nSets the amount of spread for the system.\n@param spread The amount of spread (radians).
setState RandomGenerator:setState(state)\nSets the current state of the random number generator. The value used as\nan argument for this function is an opaque implementation-dependent\nstring and should only originate from a previous call to\nRandomGenerator:getState.\n\nThis is different from RandomGenerator:setSeed in that setState directly\nsets the RandomGenerator's current implementation-dependent state,\nwhereas setSeed gives it a new seed value.\n\nThe effect of the state string does not depend on the current operating\nsystem.\n@param state The new state of the RandomGenerator object, represented\nas a string. This should originate from a previous call to\nRandomGenerator:getState.
setStencil love.graphics.setStencil()\nDefines or releases a stencil for the drawing operations.\n\nThe passed function draws to the stencil instead of the screen, creating\nan image with transparent and opaque pixels. While active, it is used\nto test where pixels will be drawn or discarded.\n\nCalling the function without arguments releases the active stencil.\n\nWhen called without arguments, the active stencil is released.
setSymlinksEnabled love.filesystem.setSymlinksEnabled(enable)\nSets whether love.filesystem follows symbolic links. It is disabled\nby default.\n@param enable Whether love.filesystem should follow symbolic links.
setTangentialAcceleration ParticleSystem:setTangentialAcceleration(min,[max])\nSets the tangential acceleration (acceleration perpendicular to the\nparticle's direction).\n@param min The minimum acceleration.\n@param max The maximum acceleration.
setTarget MouseJoint:setTarget(x,y)\nSets the target point.\n@param x The x component of the target.\n@param y The y component of the target.
setTextInput love.keyboard.setTextInput(enable)\nEnables or disables text input events. It is enabled by default.\n@param enable Whether text input events should be enabled.
setTexture Mesh:setTexture()\nSets the texture (Image or Canvas) used when drawing the Mesh.\n\nWhen called without an argument disables the texture. Untextured meshes\nhave a white color by default.
setTexture ParticleSystem:setTexture(texture)\nSets the Image or Canvas which is to be emitted.\n@param texture An Image or Canvas to use for the particle.
setTexture SpriteBatch:setTexture(texture)\nReplaces the Image or Canvas used for the sprites.\n@param texture The new Image or Canvas to use for the sprites.
setTitle love.window.setTitle(title)\nSets the window title.\n@param title The new window title.
setType Body:setType(type)\nSets a new body type.\n@param type The new type.
setUpperLimit PrismaticJoint:setUpperLimit(upper)\nSets the upper limit.\n@param upper The upper limit, usually in meters.
setUpperLimit RevoluteJoint:setUpperLimit(upper)\nSets the upper limit.\n@param upper The upper limit, in radians.
setUserData Body:setUserData(value)\nAssociates a Lua value with the Body.\n\nTo delete the reference, explicitly pass nil.\n\nUse this function in one thread only.\n@param value The Lua value to associate with the Body.
setUserData Fixture:setUserData(value)\nAssociates a Lua value with the fixture.\n\nUse this function in one thread only.\n@param value The Lua value associated with the fixture.
setUserData Joint:setUserData(value)\nAssociates a Lua value with the Joint.\n\nTo delete the reference, explicitly pass nil.\n@param value The Lua value to associate with the Joint.
setVelocity Source:setVelocity(x,y,z)\nSets the velocity of the Source.\n\nThis does not change the position of the Source, but is used to calculate\nthe doppler effect.\n@param x The X part of the velocity vector.\n@param y The Y part of the velocity vector.\n@param z The Z part of the velocity vector.
setVelocity love.audio.setVelocity(x,y,z)\nSets the velocity of the listener.\n@param x The X velocity of the listener.\n@param y The Y velocity of the listener.\n@param z The Z velocity of the listener.
setVertex Mesh:setVertex(i,x,y,u,v,[r],[g],[b],[a])\nSets the vertex information for a Mesh.\n@param i The index of the the vertex you want to alter the information\nfor.\n@param x The x vertex coordinate.\n@param y The y vertex coordinate.\n@param u The u vertex coordinate.\n@param v The v vertex coordinate.\n@param r The red color component.\n@param g The green color component.\n@param b The blue color component.\n@param a The alpha color component.
setVertexColors Mesh:setVertexColors(on)\nSets if the per-vertex colors are used when rendering instead of\nthe constant color (constant color being love.graphics.setColor or\nSpriteBatch:setColor)\n\nThe per-vertex colors are automatically enabled by default when making\na new Mesh or when doing Mesh:setVertex, but only if at least one vertex\ncolor is not the default (255,255,255,255).\n@param on True to use per-vertex coloring.
setVertexColors Mesh:setVertexColors(on)\nSets if the per-vertex colors are used when rendering instead of\nthe constant color (constant color being love.graphics.setColor or\nSpriteBatch:setColor)\n\nThe per-vertex colors are automatically enabled by default when making\na new Mesh or when doing Mesh:setVertex, but only if at least one vertex\ncolor is not the default (255,255,255,255).\n@param on True to use per-vertex coloring.
setVertexMap Mesh:setVertexMap(vertex_map)\nSets the vertex map for a Mesh. The vertex map describes the order in\nwhich the vertices are used when the Mesh is drawn.\n\nThe vertex map allows you to re-order or reuse vertices when drawing\nwithout changing the actual vertex parameters or duplicating vertices. It\nis especially useful when combined with different Mesh draw modes.\n@param vertex_map A table containing a list of vertex indices to use\nwhen drawing. Values must be in the range of [1, Mesh:getVertexCount()].
setVertices Mesh:setVertices(vertex_map)\nReplaces all vertices in the Mesh with new ones.\n@param vertex_map The table filled with vertex information tables for\neach vertex.
setVibration Joystick:setVibration(left,right)\nSets the vibration motor speeds on a Joystick with rumble support.\n@param left Strength of the left vibration motor on the Joystick. Must\nbe in the range of [0, 1].\n@param right Strength of the right vibration motor on the Joystick. Must\nbe in the range of [0, 1].\n@return boolean True if the vibration was successfully applied, false\nif not.
setViewport Quad:setViewport()\nSets the texture coordinates according to a viewport.\n@return number The top-left corner along the x-axis.\n@return number The top-right corner along the y-axis.\n@return number The width of the viewport.\n@return number The height of the viewport.
setVisible love.mouse.setVisible(visible)\nSets the visibility of the cursor.\n@param visible True to set the cursor to visible, false to hide the\ncursor.
setVolume Source:setVolume(volume)\nSets the volume of the Source.\n@param volume The volume of the Source, where 1.0 is normal volume.
setVolume love.audio.setVolume(volume)\nSets the master volume.\n@param volume 1.0f is max and 0.0f is off.
setVolumeLimits Source:setVolumeLimits(min,max)\nSets the volume limits of the source. The limits have to be numbers from\n0 to 1.\n@param min The minimum volume.\n@param max The maximum volume.
setWireframe love.graphics.setWireframe(enable)\nSets whether wireframe lines will be used when drawing.\n\nWireframe mode should only be used for debugging. The lines drawn\nwith it enabled do not behave like regular love.graphics lines:\ntheir widths don't scale with the coordinate transformations or with\nlove.graphics.setLineWidth, and they don't use the smooth LineStyle.\n@param enable True to enable wireframe mode when drawing, false to\ndisable it.
setWrap Canvas:setWrap(horizontal,[vertical])\nSets the wrapping properties of a Canvas.\n\nThis function sets the way the edges of a Canvas are treated if it is\nscaled or rotated. If the WrapMode is set to "clamp", the edge will not\nbe interpolated. If set to "repeat", the edge will be interpolated with\nthe pixels on the opposing side of the framebuffer.\n@param horizontal Horizontal wrapping mode of the Canvas.\n@param vertical Vertical wrapping mode of the Canvas.
setWrap Image:setWrap(horizontal,[vertical])\nSets the wrapping properties of an Image.\n\nThis function sets the way an Image is repeated when it is drawn with a\nQuad that is larger than the image's extent. An image may be clamped or\nset to repeat in both horizontal and vertical directions. Clamped images\nappear only once, but repeated ones repeat as many times as there is\nroom in the Quad.\n\nIf you use a Quad that is larger than the image extent and do not use\nrepeated tiling, there may be an unwanted visual effect of the image\nstretching all the way to fill the Quad. If this is the case, setting\nImage:getWrap("repeat", "repeat") for all the images to be repeated, and\nusing Quad of appropriate size will result in the best visual appearance.\n@param horizontal Horizontal wrapping mode of the image.\n@param vertical Vertical wrapping mode of the image.
setX Body:setX(x)\nSet the x position of the body.\n@param x The x position.
setX love.mouse.setX(x)\nSets the current X position of the mouse.\n@param x The new position of the mouse along the x-axis.
setY Body:setY(y)\nSet the y position of the body.\n@param y The y position.
setY love.mouse.setY(y)\nSets the current Y position of the mouse.\n@param y The new position of the mouse along the y-axis.
shader love.graphics.GraphicsFeature.shader\nSupport for Shader.
shear love.graphics.shear(kx,ky)\nShears the coordinate system.\n@param kx The shear factor on the x-axis.\n@param ky The shear factor on the y-axis.
showMessageBox love.window.showMessageBox(title,message,type ("info"),attachtowindow (true))\nDisplays a message box dialog above the love window. The message box\ncontains a title, optional text, and buttons.\n@param title The title of the message box.\n@param message The text inside the message box.\n@param type ("info") The type of the message box.\n@param attachtowindow (true) Whether the message box should be attached\nto the love window or free-floating.\n@return boolean Whether the message box was successfully displayed.
sizeall love.mouse.CursorType.sizeall\nFour-pointed arrow pointing up, down, left, and right.
sizenesw love.mouse.CursorType.sizenesw\nDouble arrow pointing to the top-right and bottom-left.
sizens love.mouse.CursorType.sizens\nDouble arrow pointing up and down.
sizenwse love.mouse.CursorType.sizenwse\nDouble arrow pointing to the top-left and bottom-right.
sizewe love.mouse.CursorType.sizewe\nDouble arrow pointing left and right.
sleep love.timer.sleep(s)\nSleeps the program for the specified amount of time.\n@param s Seconds to sleep for.
smooth love.graphics.LineStyle.smooth\nDraw smooth lines.
smooth love.graphics.PointStyle.smooth\nDraw smooth points.
sound love.sound\nThis module is responsible for decoding sound files. It can't play the\nsounds, see love.audio for that.
srgb love.graphics.CanvasFormat.srgb\nThe same as rgba8, but the Canvas is interpreted as being in the sRGB\ncolor space. Everything drawn to the Canvas will be converted from\nlinear RGB to sRGB. When the Canvas is drawn (or used in a shader),\nit will be decoded from sRGB to linear RGB.
srgb love.graphics.GraphicsFeature.srgb\nSupport for gamma-correct rendering with the srgb window flag in\nlove.window.setMode, and the "srgb" TextureFormat for Canvases and Images.
srgb love.graphics.TextureFormat.srgb\nThe same as normal, but the texture is interpreted as being in the sRGB\ncolor space. It will be decoded from sRGB to linear RGB when drawn or\nsampled from in a shader. For Canvases, this will also convert everything\ndrawn to the Canvas from linear RGB to sRGB.
start ParticleSystem:start()\nStarts the particle emitter.
start Thread:start()\nStarts the thread.\n\nThreads can be restarted after they have completed their execution.
start love.joystick.GamepadButton.start\nStart button.
static love.audio.SourceType.static\nDecode the entire sound at once.
static love.graphics.SpriteBatchUsage.static\nThe SpriteBatch will not be modified after initial sprites are added.
static love.physics.BodyType.static\nStatic bodies do not move.
step love.timer.step()\nMeasures the time between two frames. Calling this changes the return\nvalue of love.timer.getDelta.
stop ParticleSystem:stop()\nStops the particle emitter, resetting the lifetime counter.
stop Source:stop()\nStops a Source.
stop love.audio.stop()\nStops all playing audio.
stream love.audio.SourceType.stream\nStream the sound; decode it gradually.
stream love.graphics.SpriteBatchUsage.stream\nThe SpriteBatch data will always change between draws.
strip love.graphics.MeshDrawMode.strip\nThe vertices create a series of connected triangles using vertices 1,\n2, 3, then 3, 2, 4 (note the order), then 3, 4, 5 and so on.
subtractive love.graphics.BlendMode.subtractive\nSubtractive blend mode.
subtractive love.graphics.GraphicsFeature.subtractive\nSupport for the subtractive blend mode.
supply Channel:supply(value)\nSend a message to the thread Channel and wait for a thread to accept it.\n\nThe value of the message can be a boolean, string, number, LÖVE userdata,\nor a simple flat table. Foreign userdata (Lua's files, LuaSocket, ENet,\n...), functions, and tables inside tables are not supported.\n@param value The contents of the message.
sysreq love.keyboard.KeyConstant.sysreq\nSystem request key
system love.system\nProvides access to information about the user's system.
t love.keyboard.KeyConstant.t\nThe T key
tab love.keyboard.KeyConstant.tab\nTab key
tell Source:tell([unit])\nGets the currently playing position of the Source.\n@param unit The type of unit for the return value.\n@return number The currently playing position of the Source.
testPoint Fixture:testPoint(x,y)\nChecks if a point is inside the shape of the fixture.\n@param x The x position of the point.\n@param y The y position of the point.\n@return boolean True if the point is inside or false if it is outside.
testPoint Shape:testPoint(x,y)\nChecks whether a point lies inside the shape. This is particularly useful\nfor mouse interaction with the shapes. By looping through all shapes and\ntesting the mouse position with this function, we can find which shapes\nthe mouse touches.\n@param x The x component of the point.\n@param y The y component of the point.\n@return boolean True if inside, false if outside
testSegment Shape:testSegment(x1,y1,x2,y2)\nChecks whether a line segment intersects a shape. This function will\neither return the "time" of impact and the surface normal at the point of\ncollision, or nil if the line does not intersect the shape. The "time"\nis a value between 0.0 and 1.0 and can be used to calculate where the\ncollision occured.\n@param x1 The x component of the first endpoint.\n@param y1 The y component of the first endpoint.\n@param x2 The x component of the second endpoint.\n@param y2 The y component of the second endpoint.\n@return number The time of impact, or nil if no impact.\n@return number The x component of the surface normal.\n@return number The y component of the surface normal.
textinput love.textinput(text)\nCalled when text has been entered by the user. For example if shift-2\nis pressed on an American keyboard layout, the text "@" will be generated.\n@param text The UTF-8 encoded unicode text.
texturesize love.graphics.GraphicsLimit.texturesize\nThe maximum width or height of Images and Canvases.
tga love.image.ImageFormat.tga\nTarga image format.
thread love.thread\nAllows you to work with threads.\n\nThreads are separate Lua environments, running in parallel to the\nmain code. As their code runs separately, they can be used to compute\ncomplex operations without adversely affecting the frame rate of the\nmain thread. However, as they are separate environments, they cannot\naccess the variables and functions of the main thread, and communication\nbetween threads is limited.\n\nAll LOVE objects (userdata) are shared among threads so you'll only have\nto send their references across threads. You may run into concurrency\nissues if you manipulate an object on multiple threads at the same time.\n\nWhen a Thread is started, it only loads the love.thread module. Every\nother module has to be loaded with require.
threaderror love.event.Event.threaderror\nA Lua error has occurred in a thread.
threaderror love.threaderror(thread,errorstr)\nCallback function triggered when a Thread encounters an error.\n@param thread The thread which produced the error.\n@param errorstr The error message.
timer love.timer\nProvides an interface to the user's clock.
toPixels love.window.toPixels(value)\nConverts a number from density-independent units to pixels.\n\nIf the highdpi window flag is enabled in Mac OS X and the window is in\na retina screen, density-independent units will be twice the size of\npixels. Otherwise they will usually be the same. This function can be\nused to convert coordinates from the size users are expecting them to\ndisplay at onscreen to pixels. love.window.fromPixels does the opposite.\n\nMost LÖVE functions return values and expect arguments in terms of\npixels rather than density-independent units.\n@param value A number in density-independent units to convert to pixels.\n@return number The converted number, in pixels.
top love.graphics.ParticleInsertMode.top\nParticles are inserted at the top of the ParticleSystem's list of\nparticles.
transform love.graphics.StackType.transform\nThe transformation stack (love.graphics.translate, love.graphics.rotate,\netc.)
translate BezierCurve:translate(dx,dy)\nMove the Bézier curve by an offset.\n@param dx Offset along the x axis.\n@param dy Offset along the y axis.
translate love.graphics.translate(dx,dy)\nTranslates the coordinate system in two dimensions.\n\nWhen this function is called with two numbers, dx, and dy, all the\nfollowing drawing operations take effect as if their x and y coordinates\nwere x+dx and y+dy.\n\nScale and translate are not commutative operations, therefore, calling\nthem in different orders will change the outcome.\n\nThis change lasts until love.graphics.clear is called (which is called\nautomatically before love.draw in the default love.run function), or a\nlove.graphics.pop reverts to a previous coordinate system state.\n\nTranslating using whole numbers will prevent tearing/blurring of images\nand fonts draw after translating.\n@param dx The translation relative to the x-axis.\n@param dy The translation relative to the y-axis.
triangles love.graphics.MeshDrawMode.triangles\nThe vertices create unconnected triangles.
triangulate love.math.triangulate(polygon)\nTriangulate a simple polygon.\n@param polygon Polygon to triangulate. Must not intersect itself.\n@return table List of triangles the polygon is composed of, in the form\nof {{x1, y1, x2, y2, x3, y3}, {x1, y1, x2, y2, x3, y3}, ...}.
triggerleft love.joystick.GamepadAxis.triggerleft\nLeft analog trigger.
triggerright love.joystick.GamepadAxis.triggerright\nRight analog trigger.
type Object:type()\nGets the type of the object as a string.\n@return string The type as a string.
typeOf Object:typeOf(name)\nChecks whether an object is of a certain type. If the object has the type\nwith the specified name in its hierarchy, this function will return true.\n@param name The name of the type to check for.\n@return boolean True if the object is of the specified type, false\notherwise.
u love.joystick.JoystickHat.u\nUp
u love.keyboard.KeyConstant.u\nThe U key
unbind SpriteBatch:unbind()\nUnbinds the SpriteBatch.
undo love.keyboard.KeyConstant.undo\nUndo key
uniform love.graphics.AreaSpreadDistribution.uniform\nUniform distribution.
unknown love.system.PowerState.unknown\nCannot determine power status.
unmount love.filesystem.unmount(archive)\nUnmounts a zip file or folder previously mounted for reading with\nlove.filesystem.mount.\n@param archive The folder or zip file in the game's save directory which\nis currently mounted.\n@return boolean True if the archive was successfully unmounted, false\notherwise.
up love.keyboard.KeyConstant.up\nUp cursor key
update ParticleSystem:update(dt)\nUpdates the particle system; moving, creating and killing particles.\n@param dt The time (seconds) since last frame.
update World:update(dt)\nUpdate the state of the world.\n@param dt The time (in seconds) to advance the physics simulation.
update love.update(dt)\nCallback function triggered when a key is pressed.\n@param dt Time since the last update in seconds.
v love.keyboard.KeyConstant.v\nThe V key
visible love.event.Event.visible\nWindow is minimized or un-minimized by the user
visible love.visible(v)\nCallback function triggered when window is minimized/hidden or unminimized\nby the user.\n@param v Window visibility.
w love.filesystem.FileMode.w\nOpen a file for write.
w love.keyboard.KeyConstant.w\nThe W key
wait Thread:wait()\nWait for a thread to finish. This call will block until the thread\nfinishes.
wait love.event.wait()\nLike love.event.poll but blocks until there is an event in the queue.\n@return Event The type of event.\n@return mixed First event argument.\n@return mixed Second event argument.\n@return mixed Third event argument.\n@return mixed Fourth event argument.
wait love.mouse.CursorType.wait\nWait graphic.
waitarrow love.mouse.CursorType.waitarrow\nSmall wait cursor with an arrow pointer.
wd love.mouse.MouseConstant.wd\nMouse wheel down.
window love.window\nThe primary responsibility for the love.graphics module is the drawing\nof lines, shapes, text, Images and other Drawable objects onto the\nscreen. Its secondary responsibilities include loading external files\n(including Images and Fonts) into memory, creating specialized objects\n(such as ParticleSystems or Framebuffers) and managing screen geometry.\n\nLÖVE's coordinate system is rooted in the upper-left corner of the\nscreen, which is at location (0, 0). The x-axis is horizontal: larger\nvalues are further to the right. The y-axis is vertical: larger values\nare further towards the bottom.\n\nIn many cases, you draw images or shapes in terms of their upper-left\ncorner (See the picture above).\n\nMany of the functions are used to manipulate the graphics coordinate\nsystem, which is essentially the way coordinates are mapped to the\ndisplay. You can change the position, scale, and even rotation in\nthis way.
write File:write(data,[size])\nWrite data to a file.\n@param data The data to write.\n@param size How many bytes to write.\n@return boolean Whether the operation was successful.
write love.filesystem.write(name,data,[size])\nWrite data to a file.\n\nIf you are getting the error message "Could not set write\ndirectory", try setting the save directory. This is done either with\nlove.filesystem.setIdentity or by setting the identity field in love.conf.\n@param name The name (and path) of the file.\n@param data The data that should be written to the file\n@param size How many bytes to write.\n@return boolean If the operation was successful
wu love.mouse.MouseConstant.wu\nMouse wheel up.
www love.keyboard.KeyConstant.www\nWWW key
x love.joystick.GamepadButton.x\nLeft face button (X).
x love.keyboard.KeyConstant.x\nThe X key
x1 love.mouse.MouseConstant.x1\nMouse X1 (also known as button 4).
x2 love.mouse.MouseConstant.x2\nMouse X2 (also known as button 5).
y love.joystick.GamepadButton.y\nTop face button (Y).
y love.keyboard.KeyConstant.y\nThe Y key
z love.keyboard.KeyConstant.z\nThe Z key